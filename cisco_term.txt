Cisco IOS - Router, Switch

## notes:
> rename Switch -> SW
> Router -> ?

# keystrokes
?  # print all commands for curr mode
cmd?  # print cmd word complete options
cmd ?  # print cmd parameter options
cmd PARM?  # print cmd PARM word complete options
cmd PARM1 ?  # print cmd PARM next parameter options
tab  # autocomplete
ctrl+Break  # send interrupt
ctrl+Shift+6, x  #  suspend curr telent|ssh
ctrl+c  # stop cmd process
ctrl+p  # print cmd history
ctrl+n  # print next cmd history 
ctrl+f  # move cursor foward
ctrl+b  # move cursor backward
ctrl+a  # move cursor to first character
ctrl+e  # move cursor to last character
ctrl+r  # refresh cmd line
ctrl+d  # delete single character
esc+b  # move backward one word
esc+f  # move foward one word
SPACE  # move 1 page down

USER -> ENABLE -> GLOBAL Config -> INTERFACE|VLAN|LINE  # CLI modes

# Universal cmd
end|ctrl+z  # move to ENABLE mode
exit  #  move backward one user mode
logout  # log out of terminal session
reload  # reboot device
enable|disable  # enter|exit enable mode
disable  # go to USER mode
shut|no shut  # enable|disable interface
copy run start  # copy running-config to startup-config
copy start run  # copy startup-config to running-config
logging synchronous  # sync log msg output, no interrupt to prev output
show run  # print running-config
show start  # print startup-config
show ip ssh  # print ssh version, auth timeout, retries
show ssh  # print info ea connected ssh client
transport input [all|none|telnet|ssh]  # declare service to support

# erase start configuration
erase startup-config
write erase
erase start
erase nvram:

# set to default
erase start
delete vlan.dat
reload

# configure basic password only
dev(config)# line console 0
dev(config-line)# password faith
dev(config-line)# login

dev(config)# line vty 0 15
dev(config-line)# password hope
dev(config-line)# login

# configure username + password e.g. ssh
dev(config)# username USER secret|password PASS
dev(config)# line vty 0 15
dev(config-line)# login local  # enable username, password auth

# ssh configuration
dev(config)# hostname HOST
dev(config)# ip domain-name NAME
dev(config)# crypto key generate rsa

# config hostname, banner - ?
hostname HOSTNAME  # assign a host name
enable password PASSWORD  # set unencrypted enable password
enable secret PASSWORD  # set encrypted enable password
service password-encryption  # encode all passwords except enable secret password
service timestamps  # enable device to generate time stamps on log messages (especially debug messages!)
banner motd_#MESSAGE#  # set motd banner MESSAGE
banner login_#MESSAGE#  # set login MESSAGE, print after motd message
banner exec_#MESSAGE#  # set executive MESSAGE, print after login process

# config console, vty lines - ?
Dev(config)#line console  # enter console line config mode
Dev(config)#line vty 0 15  # enter virtual terminal line config mode
Dev(config)#line aux 0  # enter auxiliary line config mode
Dev(config-line)#password PASSWORD # set password
Dev(config-line)#login |local  # enforce password login for local account
Dev(config-line)#logging synchronous  # halt router output interruptions when inputing in cli
Dev(config-line)#exec-timeout VALUE  # set terminal time-out value, minutes-seconds
Dev(config-line)#exec-timeout 3  # enable time-out - 3 minutes
Dev(config-line)#service tcp-keepalives-in  # enable keepalives

# telnet|ssh - ?
show sessions  # print telnet/ssh sessions w/ conn numbers
show users  # print user log-in list
telnet|ssh IP
resume CONN-NUMBER
resume 1
disconnect CONN-NUMBER
disconnect 1

# ssh - configure - ?
Dev(config)#username USERNAME password PASSWORD
Dev(config)#username student secret cisco
Dev(config)#cryto key generate rsa  # create public, pvt keys
Dev#show crypto key mypubkey rsa  # print key configurations, names (public, private)
Dev(config)#line vty 0 15
Dev(config-line)#login local  # enforce use of usernames and passwords
Dev(config-line)#transport input telnet|ssh  # open both telnet and ssh lines
Dev(config)#ip ssh time-out SECONDS  # set ssh time value
Dev(config)#ip ssh authentication-retries VALUE

# SWITCH
show int status  # print list of each int for speed, duplex, and vlan association settings
show int description  # print list of each int for protocol and line status
show int INT  # print INT detailed info
show int statistics  # print statistical info for interface, packet counters and communications
show mac address-table |dynamic  # print mac-address table, all types|dynamic
show mac address-table dynamic address MAC  # print dynamic learned mac addr
show mac address-table dynamic interface INT  # print dynamic learned mac addr assoc interfaces
show mac address-table count  # print mac addr entries + total remaining
show mac address-table aging-time  # print global and per-vlan mac addr inactive timeout
clear mac address-table dynamic |vlan VLAN|int INT|address MAC # empty all mac addr table dynamic entries or specify

## config ip add, df gw
switch>enable
switch#config t
switch(config)#ip default-gateway IP  # define default gateway
switch(config)#interface vlan 1  # management vlan
switch(config-if)#ip address IP MASK
switch(config)#no shut

switch(config)#no ip domain-lookup  # disable dns lookup
switch(config)#ip domain-name NAME  # declare domain name

## vlan manage
show vlan brief  # print interface assignments for local vlans
show vlan summary  # print count of all configured vlans
show vlan id VLAN-ID  # print VLAN-ID summary
show vlan name VLAN-NAME  # print VLAN-NAME summary
show int vlan VLAN-ID  # print VLAN info for all associated intefaces
show int trunk  # print trunking interfaces
show int INT switchport  # print INT vlan info; vlan tags, allowed vlans, native vlan
show dhcp lease  # print dhcp ip address for mngmt vlan

> Priviledged Exec mode - User Exec subset of Privil Exec
show mac address-table  # print mac addresses table w/ ports, vlans
show mac address-table VLAN-ID
show mac address-table static
show mac address-table dynamic
show mac address-table dynamic vlan VLAN-ID

show boot  # print ios image file name and other relevant info
delete flash:vlan.dat  # delete entire vlan dat file from flash memory (system restored to factory defaults)
reload  # reset/reboot switch
terminal monitor  # print console messages from various ios output (via telnet, ssh, console connect)

## speed|duplex - manual config, disable IEEE auto-negoiation
switch>show int status  # print speed and duplex settings 
switch(config-if)#duplex half|full|auto  # set on a per interface basis
switch(config-if)#speed VALUE  # value in mbps

## vlan trunking - single interface
switch>show int trunk  # print active trunking ints
switch>show int INT trunk  # print INT trunk info, allowed vlans
switch>show int INT switchport  # print INT vlan trunking stats
switch(config-if)#switchport trunk native vlan VLAN-ID  # define interface native vlan
switch(config-if)#switchport trunk allowed vlan VLAN-ID  # define int primary vlan (add vlans afterwards)
switch(config-if)#switchport trunk allowed vlan add VLAD-ID(s)  # separated by commas, add specific vlans to be allowed on trunk link
switch(config-if)#switchport trunk allowed vlan add|remove|all|except

switch(config-if)#switchport trunk native vlan 1
switch(config-if)#switchport trunk allowed vlan 10
switch(config-if)#switchport trunk allowed vlan add 20, 30  # vlans allowed on trunk link

switch(config-if)#switchport mode trunk
switch(config-if)#switchport mode access
switch(config-if)#switchport mode dynamic auto|desirable  # dynamically negoiate trunk status; trunking not initiated on "auto"
switch(config-if)#switchport trunk encapsulation dot1q|isl|negoiate  # define trunk encapsulation - default '802.1q'
switch(config-if)#switchport nonegoiate  # stop DTP advertisements, set interface to trunking unconditionally

## router-on-a-stick - inter-vlan routing, sub-interfaces
router(config)#int INT  # print interface status, trunk
router(config-if)#no shut  # enable trunk int
router(config)#int main int.sub INT  # define sub interface
router(config-subif)#encapsulation dot1q VKAN-ID  # enable trunking for subint with specified vlan tag
router(config-subif)#ip address IP-NETWORK MASK  # assign sub int to network ip

## router-on-a-stick - default native vlan, trunk interface gw ip
switch#config t
switch(config)#ip default-gateway 172.16.32.1
switch(config)#int gi1/1
switch(config-if)#switchport mode trunk
switch(config-if)#switchport allowed vlan 1
switch(config-if)#switchport allowed vlan add 20, 30  # allowed vlans

router#config t
router(config)#int gi1/0
router(config-if)#no shut
router(config-if)#ip address 172.16.32.1 255.255.255.0  # native vlan is switch gateway ip, also sub int router ip
router(config-if)#int gi1/0.10
router(config-subif)#encapsulation dot1q 1
router(config-subif)#ip address 172.16.33.1 255.255.255.0
router(config-subif)#int gi1/0.20
router(config-subif)#encapsulation dot1q 20
router(config-subif)#ip address 172.16.34.1 255.255.255.0
router(config-subif)#int gi1/0.30
router(config-subif)#encapsulation dot1q 30
router(config-subif)#ip address 172.16.35.1 255.255.255.0

## router-on-a-stick - configure native vlan; no trunk interface gw ip
switch#config t
switch(config)#ip default-gateway 172.16.32.99  # native is switch gateway ip
switch(config)#int gi1/1
switch(config-if)#switchport trunk allowed vlan 99
switch(config-if)#switchport trunk allowed vlan add 20, 30  # must manually add other vlans, in addition to initial allowed vlan

router(config)#int gi1/0
router(config-if)#no shut
router(config-if)#int gi1/0.1
router(config-subif)#encapsulation dot1q 99 native  # native vlan is switch gateway ip, also sub int router ip
router(config-subif)#ip address 172.16.32.99 255.255.255.0
router(config)#int gi1/0.20
router(config-subif)#encapsulaion dot1q 20
router(config-subif)#ip address 172.16.33.20 255.255.255.0

## vlan trunking - mode, native interfaces
switch(config)#int range fa0/1  # 24
switch(config-if-range)#switchport mode trunk
switch(config-if-range)#switchport trunk native vlan 99  # advertise vlan 99 as native trunking vlan to all ints in range
switch(config-if-range)#no shut

## vlan interfaces
switch(config)#vlan VLAN-ID  # define vlan with associated number
switch(config-vlan)#name VLAN-NAME  # define vlan name
switch(config)#int range INT or INT-RANGE
switch(config-if-range)#switchport mode access  # define ints access only, no trunking
switch(config-if-range)#switchport access vlan VLAN-ID  # assign ints to access vlan
switch(config-if-range)#no shut

switch(config)#vlan 10
switch(config-vlan)#name faculty
switch(config)#int range fa0/1-?  # ?
switch(config-if-range)#switchport mode access
switch(config-if-range)#switchport access vlan 10
switch(config-if-range)#description faculty usage
switch(config-if-range)#no shut

## vlan management interface
switch(config)#ip default-gateway IP  # no mask, define default gateway for mngmt vlan
switch(config)#int vlan VLAN  # define vlan as int vlan for mngmt
switch(config-if)#ip address IP-NETWORK MASK  # assign ip address to mngmt vlan
switch(config-if)#ip address dhcp  # assign dynamic ip add
switch(config-if)#description STRING
switch(config-if)no shut

switch(config)#vlan 99
switch(config)#int vlan 99
switch(config-if)#ip address 192.168.1.1 255.255.255.0
switch(config-if)#description management interface
switch(config-if)#no shut

## port-security
switch#show run  # print interfaces
switch#show port-security  # print int with port security enabled
switch#show port-security int [interface name]  # print security status/assignment of specified int/port

switch(config-if)#switchport mode access  # define interface as access interface only (port security should not be enabled on trunk links)
switch(config-if)#switchport port-security  # enable port security on interface
switch(config-if)#switchport port-security maximum NUMBER  # specify the maximum number of mac addresses allowed on interface
switch(config-if)#switchport port-security mac-address MAC  # define port security MAC(s), multiple use
switch(config-if)#switchport port-security mac-address sticky  # enable 'sticky' learning of mac addresses
switch(config-if)#switchport port-security violation protect|restrict|shutdown  # define action for non-port-security enable ports

## VTP - vlan trunking protocol
switch>show vtp status  # print status info for current vtp domain; confirm vtp settings
switch>show int trunk  # print trunking interface info
switch>show int INT switchport  # shows vlan, trunking and interface status details
switch#show vtp counters  # print paramter counters for current vtp domain
switch#show vtp password  # print password (no print 'show vtp status')

switch(config)#vtp mode server|client|transparent  # specify vtp mode
switch(config)#vtp domain DOMAIN  # assign domain name for vtp
switch(config)#vtp password PASSWORD  # configure password for vtp domain
switch(config)#vtp version VER-NUMBER  # assign vtp version number
switch(config)#vtp pruning  # enable vtp pruning

## STP - spanning tree protocol, auto enable
switch#show spanning-tree  # print spanning tree protocol, path cost values, interface roles and states
switch#show spanning-tree root  # lists the bridge id of the root in each vlan(!)
switch#show spanning-tree active  # print stp info for active interfaces only
switch#show spanning-tree detail  # print stp path cost and interface info
switch#show spanning-tree vlan VLAN-ID  # print stats for specified vlan
switch#show spanning-tree vlan 10  # print stats for vlan 10
switch# |no debug spanning-tree events  # enable|disable debugging
switch#clear spanning-tree detected-protocols  # restart protocol migration process

switch(config)#spanning-tree mode STP-MODE  # declare stp mode, multi-variant per interface
switch(config)#spanning-tree mode rapid-pvst  # enable rstp and pvrst

switch(config)#spanning-tree vlan VLAN-ID root primary|secondary  # assign primary, secondary root bridge contender
switch(config)#spanning-tree vlan VLAN-ID priority VALUE  # assign priority value
switch(config)#spanning-tree vlan 1 priority 24576
switch(config)#spanning-tree vlan VLAN-ID root primary diameter VALUE  # assign network diameter for root bridge
switch(config)#spanning-tree vlan 1 root primary diameter 5  # set switch network diameter to 5

switch(config-if)#spanning-tree link type LINK  # define inteface link type
switch(config-if)#spanning-tree link type point-to-point  # port role declared as point to point
switch(config-if)#spanning-tree vlan VLAN-ID cost COST  # define inteface vlan port cost
switch(config-if)#spanning-tree vlan 1 cost 2
switch(config-if)#spanning-tree port-priority VALUE  # configure port priority value
switch(config-if)#spanning-tree port-priority 105

## STP - portfast, bpdu guard
switch(config-if)#spanning-tree portfast  # configure portfast on access ports (end user nodes)
switch(config-if)#spanning-tree bpduguard enable  # enable bpdu guard; use to secure root switch election from rogue switches attachment

## etherchannel configuration - (catalyst switch 2960+), STP auto enable
>> switches directly connected with identical channel numbers + relevant ports
switch#show etherchannel CHANNEL summary  # print etherchannel stats for specified channel number
switch(config-if)#channel-group GROUP mode on|auto|desirable  # configure etherChannel on specified int/ports

>> physical cabling connections match etherchannel commands
switch1(config)#int range fa0/15
switch1(config-if-range)#channel-group 1 mode desirable
switch2(config)#int range fa0/9
switch2(config-if-range)#channel-group 1 mode auto
switch2#show etherchannel 1 summary
switch1#show etherchannel 1 summary

## interface Configuration mode
switch(config-if)#mdix auto  # media dependent interface with crossover; enable auto detect, can sense pin-out settings on both ends of link
switch(config-if)#mac-address MAC  # assign static mac address to interface
switch(config-if)#mls qos trust cos  # identifies voice traffic as priority
switch(config-if-range)#switchport voice vlan VLAN-ID  # assign ints to voice vlan
switch(config-if)#logging synchronous  # stop switch output from interrupting typed commands

# ROUTER
show ip host  # USER, print ip info
show hosts  # USER, print host ip name map
ip host NAME IP  # configure host IP to NAME map

> User Exec mode
ping ip  # extended ping; ping a target ip address from a specified source address (choose 'y' in extended options!)
ping  # use this command solo, to input specifics about ping execution
ping IP  # send ping to specified address
traceroute  # use extended version to specify destination and source
traceroute IP  # trace route of input IP address

show int INT  # print stats for particular interface
show ip int brief  # short print of ip address assignments on local interfaces (no masks listed)
show ip route  # print routing table
show ip route IP-NETWORK  # print routing info for specified network address
show ip protocols  # print networks advertised by local routing protocol and passive interfaces also
show protocols  # print interface protocol status (as 'up' or 'down') and network masks
show controllers INT  # print DCE capability and clockrate info
show version  # print currently loaded IOS version, hardware, and device information
show process  # print physical memory allocation
show flash  # print flash memory allocation (used and available memory)
dir flash:  # print flash memory file listing
show clock  # print device time
show clock_rate  # print clock rate use on DCE connections

> Priviledged Exec mode
show run
show run INT
show start
show arp
terminal monitor  # enable log, debug and alert message print to screen console session
copy run start  # copy the active running configuration to NVRAM
erase start  # erase the config in NVRAM

reload  # reboot
setup  # enter setup mode
auto secure  # enable security features, disable inactive services

cd nvram:  # change directory to nvram
pwd  # present working directory, use to verify presence current directory
dir  # directory listing
show file system  # print file systems, memory allocated to each file
debug  # not recommended (be specific about exact debugging operations), start debugging process
undebug all

> Global Configuration mode
|no ip domain-lookup  # enable|disable ip domain lookup
ip domain-name NAME  # define domain name
ip default-network IP-NETWORK  # assign network address for def gw (network addr must already be present in routing table)
config-register HEX-REG  # boot reg setting; 2100 (rom monitor), 2101 (rom memory/flash), 2102 (nvram), 2142(password recovery/reset)
|no cdp run  # enable|disable cdp advertisements
service timestamps log|debug  # enable time stamps for logging and debugging messages

## SDM - Security Device Manager ?
router(config)#ip http server
router(config)#ip http secure-server
router(config)#ip http authentication local
router(config)#username student privilege 15 secret cisco123
router(config)#line vty 0 4 or 0 15
router(config-line)#privilege level 15
router(config-line)#login local
router(config-line)#transport input telnet ssh
router(config-line)#exit

## transfer files
router#copy run tftp  # copy running-config to tftp server
router#copy tftp run  # copy running-config from tftp server
router#copy tftp flash  # copy tftp file to local flash memory
router#copy flash tftp  # copy flash file to tftp server

## default, static routes
router#debug ip routing  # initiate debugging of ip routing protocols
router#debug ip PROTOCOL  # debug specific routing protocol
router#clear ip route*  # delete dynamically learned routing table entries
router#clear ip route [network address]  # delete specific route from routing table
router#terminal ip netmask-format decimal  # print network masks in dotted decimal format (routing table)

router(config)#ip route IP-NETWORK MASK IP-HOP INT-EXIT ADMIN-DIST  # assign admin distance to route
router(config)#ip route 10.1.3.0 255.255.255.0 10.1.130.253 210  # assign admin distance for route to "210"
router(config)#ip route 0.0.0.0 0.0.0.0 s0/0  # assign default route to serial 0/0
router(config)#ip route 0.0.0.0 0.0.0.0 lo0  # create default route to lo0 as exit int, all traffic going to lo0 is discarded
router(config)#ip route 172.16.0.0 255.255.0.0 s0/1  # create default route to exit int
router(config-router)#default-information originate  # propagate default route to neighboring routers
router(config-router)#redistribute static  # advertises all local static routes to neighboring routers

## create bit bucket
router(config)#ip route IP-NETWORK MASK Null0  # send network traffic to bit bucket 
router(config)#ip route 192.168.1.0 255.255.255.0 Null0  # traffic destined for network will be discarded

## set boot sequence
boot system  # specify boot sequence using this command in succession
router(config)#boot system flash  # boot most recent file in flash memory
router(config)#boot system flash IOS-FILE  # boot specified ios file in flash memory
router(config)#boot system tftp IOS-FILE IP-INT  # boot file from tftp server
router(config)#boot system rom  # boot in rom monitor mode

## set loopback interface  # virtual interface, status always 'up'
router(config)#int INT-LOOP  # define loopback int
router(config-if)#ip address IP-NETWORK MASK  # assign ip address to loopback int
router(config)#interface lo0  # loopback 0 int
router(config-if)#ip address 10.0.0.1 255.0.0.0  # use full 32-bit mask on loopback int to avoid routing problems

## ppp - Point-to-Point protocol
router(config)#username NAME password PASSWORD  # define username and pswrd for ppp pap or chap authentication
router(config-if)#encapsulation ppp  # define point-to-point encapsulation
router(config-if)#ppp authentication pap  # enable pap on int link
router(config-if)#ppp authentication chap  # enable chap
router#debug ppp  # enable debugging for ppp
router#debug ppp packet  # print packets being sent and received
router#debug ppp authentication  # print debug info for link 
router#debug ppp ?  # print parameters for ppp debugging options

router(config-if)#compress predictor|static  # compression protocol options used for ppp
router(config-if)#ppp quality VALUE-PERCENT  # define quality setting for link
router(config-if)#ppp quality 80  # protocol monitor link; if packets dropped exceed 20 percent than link is shut down
router(config-if)#ppp mulitlink  # define int to be multi-link (load balancing over multiple physical links)

## HDLC - High-Level Data Link Control  # configure
router(config-if)#encapsulation hdlc  # define high level data link control encapsulation

disable routing protocol
router(config)#no router PROTOCOL  # disable routing protocol
router(config)#no router rip  # disable rip protocol

## RIP2
router>show ip rip database  # show rip database
router# |no debug ip rip  # enable|diable debug
router(config)#router rip
router(config-router)#version 2  # enable rip version 2
router(config-router)#no auto-summary  # must disable auto summary for rip 2 config to be complete
router(config-router)#network IP-NETWORK  # no mask

## EIGRP
router>show ip eigrp int  # print local eigrp interfaces
router>show ip eigrp neighbors  # print eigrp neighbors; successors only
router>show ip eigrp topology  # print successors and feasible successors
router>show ip eigrp topology IP-NETWORK  # print status for specific network address, with external route info
router>show ip eigrp topology all-links  # print all links feasible or not
router>show ip eigrp traffic  # print local traffic stats
router# |no debug eigrp fsm|packet  # enable|disable debug for packet protocol

router(config)#router eigrp AS-VALUE  # assign eigrp Autonomous System number
router(config-router)#network IP-NETWORK MASK  # define networks to be routed
router(config-router)#maximum-paths  # define number of paths to be used for equal load cost balancing
router(config-router)#metric weights tos  # modify metric values bandwith and delay; k1, k3  # modifiable static values
	reliability and load;  # dynamic values shown in fraction form representing link capacity (i.e. 255/255 = very reliable link but fully loaded)

router(config-if)#ip summary-address eigrp AS-VALUE IP-NETWORK MASK  # manually summarize networks per interface
router(config-if)#ip summary-address eigrp 1 192.168.0.0 0.0.255.255  # summary route will be advertised from interface

router(config-if)# |no bandwith [value]  # enable|disable bandwith value in kbps
router(config-if)#ip bandwidth-percent eigrp [AS number_percent]  # set percent of bandwidth to be used in eigrp updates
router(config-if)# |no ip bandwidth-percent eigrp 1 50  # set (or nullify) bandwidth limit of eigrp updates to 50 percent

router(config-if)#ip hello-interval eigrp AS-VALUE  # define hello packet time interval in seconds
router(config-if)#ip hold-time eigrp AS-VALUE-SEC  # define hold-time in seconds
router(config-if)#delay VALUE  # set delay value (in tens of microseconds)
router(config-if)#ip hello-interval eigrp 1 60
router(config-if)#ip hold-time eigrp 1 180

## OSPF protocol - wildcard masking
router>show ip ospf  # print number of times algorithm has been executed, link state interval status
router>show ip ospf interface brief
router>show ip ospf interface INT  # print specific interface info (i.e. cost)
router>show ip ospf neighbor  # print ospf neighbors
router>show ip ospf neighbor detail  # print list of neighbors, with priority and state value included
router>show ip ospf database  # print network contents of ospf routing protocol
router# |no debug ip ospf hello|packets|events  # enable (or disable) ospf debugging
router#clear ip ospf process  # delete local router id

router(config)#router ospf PROC-ID  # set local process id
router(config-router)#network [network address_wild card mask_area id]  # advertise network through ospf
router(config)#router ospf 1 
router(config-router)#network 172.16.1.16 0.0.0.15 area 0  # backbone area denoted with "0"

router(config-if)# |no bandwidth VALUE  # modify bandwidth per interface in kbps
router(config-if)#ip ospf cost VALUE  # modify cost value per interface
router(config-if)#ip ospf hello-interval VALUE  # modify hello interval in seconds
router(config-if)#ip ospf dead-interval VALUE  # dead interval is 4 times hello interval, usually no need for modification

## OSPF - NMBA - non-broadcast multiple access
router(config-if)#ip ospf priority 0-255  # assign ospf priority value of local interface
router(config-if)#ip ospf network point-to-multipoint  # identify network type in a point to multipoint environment
router(config-router)#router-id IP  # assign ip address as router id of local router
router(config-router)#neighbor IP  # no mask, identify neighbor router in NBMA networks, no multicasts sent

## authentication
>> RIP
router(config)#key chain RIP_KEY
router(config-keychain)#key 1
router(config-keychain-key)#key-string cisco
router(config-if)#ip rip authentication mode md5
router(config-if)#ip rip authentication key-chain RIP_KEY

>> EIGRP
router(config)#key chain EIGRP_KEY
router(config-keychain)#key 1
router(config-keychain-key)#key-string cisco
router(config-if)#ip authentication mode eigrp 1 md5
router(config-if)#ip authentication key-chain eigrp 1 EIGRP_KEY

>> OSPF
router(config-if)#ip ospf authentication-key PASSWORD  # set password for ospf router authentication
router(config-if)#ip ospf message-digest key KEY md5 PASSWORD  # encrypt pass area router authentication
router(config-router)#area AREA authentication  # enable authentication area wide (must be entered on each area router)

router(config-if)#ip ospf message-digest-key 1 md5 cisco
router(config-router)#area 0 authentication message-digest

## DHCP
router>show ip dhcp binding  # print list of all host ip address to mac address bindings
router>show ip dhcp pool  # print dhcp pool info
router>show ip dhcp conflict  # print list of address conflicts
router#show dhcp server  # print dhcp server ip and dhcp lease agreements and counts of dhcp messages sent and received
router#debug ip dhcp server events  # print events; address assignments and database updates 
router#debug ip dhcp server packets  # print packet reception and transmission
router#debug ip dhcp server linkage  # print linkage information

router(config)#service dhcp  # enable dhcp server and dhcp functionality; enabled by default
router(config)#no service dhcp  # disable dhcp, can cause dhcp configuration issues
router(config-if)#ip address dhcp  # enable dhcp client for interface

>> IP helper-address command
router(config-if)#ip helper-address IP  # send dhcp broadcasts, default router
router(config-if)#ip forward-protocol IP  # define additional forward port(s)

>> DHCP mode
router(config)#ip dhcp ?  # print dhcp config modes
router(config-dhcp)#network IP-NETWORK MASK|PREFIX  # define dhcp pool net addr
router(config-dhcp)#default-router IP # define dhcp default router
router(config-dhcp)#lease days|hours|minutes|infinite]  # define dhcp lease period
router(config)#ip dhcp excluded-address IP-START IP-END  # define dhcp exclude range
router(config)#ip dhcp pool NAME # define dhcp pool NAME
router(dhcp-config)#network IP MASK  # define network
router(dhcp-config)#dns-server IP MASK  # define dns server
router(dhcp-config)#default-router IP MASK  # define default router

router(config)#ip dhcp excluded-address 192.168.10.1 192.168.10.10
router(config)#ip dhcp pool R1Fa0
router(dhcp-config)#network 192.168.10.0 255.255.255.0
router(dhcp-config)#dns-server 192.168.11.5
router(dhcp-config)#default-router 192.168.10.1

## NAT
router#show ip nat translations  # print ip nat mappings public to private
router#show ip nat translations verbose
router#show ip nat statistics  # print total active translations, addresses in pool and number of addresses allocated
router#clear ip nat translations *  # clears nat dynamic translations (before timeout expiration)
router#debug ip nat  # run nat debug
router#debug ip nat detailed
router(config)#ip nat translation time VALUE  # define timeout, seconds

>> Static
router(config)#ip nat inside source list static IP-INSIDE IP-OUTSIDE  # define static map
router(config)#ip nat inside source list static 192.168.20.254 209.165.200.254

>> Dynamic
router(config)#ip nat pool NAME IP-START IP-END netmask MASK  # define pool for translation
router(config)#ip nat inside source list ACL-NAME pool POOL-NAME  # define dynamic nat translations w/ acl

router(config)#ip access-list extended LIST  # apply acl LIST
router(config-ext-nacl)#permit ip 192.168.10.0 0.0.0.255 any  # define private ip host address(es)
router(config-ext-nacl)#permit ip 192.168.11.0 0.0.0.255 any
router(config)#ip nat pool POOL 209.165.200.241 209.165.200.246 netmask 255.255.255.248  # define nat pool
router(config)#ip nat inside source list NAT-LIST pool POOL

>> PAT dynamic  # overload outside serial interface
router(config)#access-list 10 permit 192.168.0.0 0.0.255.255  # define acl for private ip host
router(config)#ip nat inside source list 10 interface serial0/1/0 overload  # enable pat on public outside serial interface
router(config)#int fa0/1
router(config-if)#ip nat inside
router(config-if)#int s0/1/0
router(config-if)#ip nat outside

>> PAT dynamic  # overload address pool
router(config)#access-list 10 permit 192.168.0.0 0.0.255.255
router(config)#ip nat pool POOL2 209.165.200.226 209.165.200.240 netmask 255.255.255.248  # define public ip pool for nat translation
router(config)#ip nat inside source list 10 pool POOL2 overload  # enable pat on public ip pool
router(config)#int s0/0/0
router(config-if)#ip nat inside
router(config-if)#int s0/1/0
router(config-if)#ip nat outside

## ACLs - apply to vty lines 
Dev(config)#access-list 101 permit ip 10.2.2.0 0.0.0.3 any
Dev(config)#access-list 101 permit ip 192.168.30.0 0.0.0.255 any
Dev(config)#line vty 0 15
Dev(config-line)#access-class 101 in  # enable acl on inbound int

## ACL - numbered | named, implicit "deny all"
router#show int INT  # print interfaces w/ ACLs
router#show access-lists  # print access list(s) contents
router#show ip access-lists  # print ip access list(s) contents
router(config)#no access-list 101  # delete acl config
router(config-if)no ip access-group 101 in  # remove acl from interface BEFORE edit!

>> Numbered standard
router(config)#access-list NUMBER permit|deny IP MASK-WILDCARD  # define numbered acl
router(config)#access-list 10 permit 192.168.30.0 0.0.0.255
router(config-if)#access-group 10 in

>> Numbered extended
router(config)#access-list NUMBER permit|deny PROTOCOL IP-SOURCE IP-DEST eq PROT  # define extended acl
router(config)#access-list 101 permit tcp 192.168.30.0 0.0.0.255 any ep 80  # permit source to any destin of port 80
router(config-if)#access-group 101 in  # apply numbered acl to inbound int

>> Numbered extended  # telnet, acl to vty lines
router(config)#access-list 101 permit ip 10.2.2.0 0.0.0.3 any
router(config)#access-list 101 permit ip 192.168.30.0 0.0.0.255 any
router(config)#line vty 0 4
router(config-line)#access-class 101 in  # enable acl on inbound telnet lines

>> Named standard
router(config)#ip access-list standard NAME  # define standard named acl
router(config)#ip access-list standard STND-1
router(config-std-nacl)#deny IP MASK-WILDCARD log  # denies packet from specified ip add and print log message
router(config-if)#ip access-group NAME in  # apply standard acl to inbound interface

router(config-std-nacl)#deny 192.168.11.0 0.0.0.255 log  # deny source and log matching packets
router(config-std-nacl)#permit any  # deny source then permit any
router(config-if)#ip access-group STND-1 in

>> Named extended
router(config)#ip access-list extended NAME  # define extended named acl
router(config-ext-nacl)#deny IP MASK-WILDCARD host IP  # deny source to specific host, host, no mask
router(config-if)#ip access group NAME out  # apply extended acl to outbound interface

router(config)#ip access-list extended EXTEND-1
router(config-ext-nacl)#deny 192.168.10.0 0.0.0.255 host 209.165.200.225
router(config-if)#ip access-group EXTEND-1 out

>> Remarks
router(config)#access-list NUMBER STRING  # define remark
router(config)#access-list 10 remark permit hosts from network 192.168.10.0  # issue show run command to view remarks
router(config)#access-list 10 permit 192.168.10.1 255.255.255.0

router(config)#ip access-list extended Bob
router(config-ext-nacl)#remark this acl blocks bob from telnet access
router(config-ext-nacl)#deny tcp host 192.168.10.13 any eq telnet

>> DO command
router(config)#ip access-list standard 24  # define standard named acl w/ number
router(config-std-nacl)#permit 10.1.1.0 0.0.0.255
router(config-std-nacl)#permit 10.1.2.0 0.0.0.255
router(config-std-nacl)#deny any
router(config-std-nacl)#do show ip access-list 24  # define 'do' cmd, print acl content, no exit prompt

>> Dynamic  # telnet vty lines, password auth
router(config-line)#autocommand access-enable host timeout VALUE  # timeout value measures inactivity, will expire session (optional)
router(config)#access-list NUMBER permit|deny ACL-EXTEND  # assign number to extended acl
router(config)#access-list NUMBER dynamic testlist timeout VALUE permit|deny ACL-EXTEND  # add timeout value

router(config)#access-list 101 permit tcp any host 10.2.2.2 eq telnet  # permit telnet sessions at router incoming interface
router(config)#access-list 101 dynamic testlist timeout 15 permit ip any any
router(config)#int s0/0/1  # point towards incoming telnet clients
router(config-if)#access-group 101 in

>> Reflexive  # extended named for inbound session reflection
router(config)#ip access-list extended OUTBOUND-FILTER
router(config-ext-nacl)#permit tcp 192.168.0.0 0.0.255.255 any reflect TCP-TRAFFIC
router(config-ext-nacl)#permit icmp 192.168.0.0 0.0.255.255 any reflect ICMP-TRAFFIC
router(config)#ip access-list extended INBOUND-FILTER
router(config-ext-nacl)#evaluate TCP-TRAFFIC  # map OUTBOUND-FILTER for TCPTRAFFIC to INBOUND-FILTERS acl
router(config-ext-nacl)#evaluate ICMP-TRAFFIC
router(config)#int s0/1/0
router(config-if)#ip access-group INBOUND-FILTER in  # apply filter
router(config-if)#ip access-group OUTBOUND-FILTER out

>> Time-based
router(config)#time-range EVERY-OTHER-DAY
router(config-time-range)#periodic Monday Wednesday Friday 8:00 to 17:00  # define acl time range boundary
router(config)#access-list 101 permit tcp 192.168.10.0 0.0.0.255 any eq telnet time-range EVERY-OTHER-DAY
router(config)#int s0/0/0
router(config-if)#ip access-group 101 out

## e.g.
router(config)#access-list 101 remark allow http and telnet access
router(config)#access-list 101 permit tcp 192.168.1.0 0.0.0.255 10.1.1.0 0.255.255.255 eq 80  # http
router(config)#access-list 101 permit tcp 192.168.2.0 0.0.0.255 10.1.1.0 0.255.255.255 eq 23  # telnet
router(config)#access-list 101 deny ip any any  # include to view counter increments for "deny ip any any" statement

router(config)#access-list 102 remark allow outbound traffic to return only if from 172.22.10.0 network
router(config)#access-list 102 permit tcp any 172.22.10.0 0.0.0.255 established
router(config)#access-list 102 deny ip any any

router(config)#access-list 120 permit tcp any gt 1023 host 10.1.3.2 eq 22  # ssh; permit any source port > 1023 to host
router(config)#access-list 120 permit tcp any any eq 25  # smtp
router(config)#access-list 120 deny ip any any

router(config)#access-list 121 remark stop any source node from using ping or traceroute command to query e-commerce server
router(config)#access-list 121 deny icmp any host 172.16.1.1  # deny icmp traffic from any source to host
router(config)#access-list 121 permit ip any any

router(config)#access-list 122 permit udp 1.0.0.0 0.255.255.255 lt 1023 any eq 53  # dns; permit any source port < 1023 to host
router(config)#access-list 122 deny ip any any

router(config)#access-list 123 remark allow any source traffic to any destination for dhcp, tftp, and snmp but deny everything else
router(config)#access-list 123 permit udp any any eq 67  # dhcp
router(config)#access-list 123 permit udp any any eq 68  # dhcp
router(config)#access-list 123 permit udp any any eq 69  # tftp
router(config)#access-list 123 permit udp any any eq 161  # snmp
router(config)#access-list 123 deny ip any any

router(config)#ip access-list extended LOCAL-AREA
router(config-ext-nacl)#remark deny ftp and management traffic but permit everything else
router(config-ext-nacl)#deny tcp 10.1.1.0 255.0.0.0 any eq 20  # ftp data
router(config-ext-nacl)#deny tcp 10.1.1.0 255.0.0.0 any eq 21  # ftp
router(config-ext-nacl)#deny udp 10.1.2.0 255.0.0.0 any eq 161
router(config-ext-nacl)#permit ip any any

## IPv6
router#show ipv6 route |IP | MASK  # print route contents
router#show ipv6 int |INT
router#show ipv6 int brief

router#show ipv6 route |summary  # print routing table - summary
router#show ipv6 static |IP|INT  # print only static routes installed in routing table
router#show ipv6 static detail  # print detailed static routes

router#show ipv6 protocols  # print curr routing protocol
router#show ipv6 rip
router#show ipv6 neighbors  # print neighbor discovery cache
router#show ipv6 routers  # print advertisements
router#show ipv6 traffic  # print traffic stats

router#clear ipv6 rip  # delete rip routing table
router#clear ipv6 route*  # delete all routing table routes
router#clear ipv6 route IP  # delete specific route
router#clear ipv6 traffic  # reset traffic counter(s)

router#debug ipv6 rip  # print debug message, routing protocol
router#debug ipv6 packet  # print debug message, packets
router#debug ipv6 routing  # print debug message, routing, cache updates

router(config)#ipv6 unicast-routing  # enable datagram forwarding
router(config)#ipv6 router rip NAME
router(config-if)#ipv6 rip NAME enable  # enable rip protocol
router(config-if)#ipv6 address IP PREFIX eui-64  # define ip w/ eui format

> Interface Configuration mode
router(config-if)#ip address IP MASK  # define static ip
router(config-if)#ip address dhcp  # enable dhcp client
router(config-if)#ipv6 address IP MASK  # enable ipv6
router(config-if)#ip address IP MASK secondary  # enable secondary ip addr
router(config-if)#ip address 10.1.7.252 255.255.255.0 secondary

router(config-if)#clock rate VALUE  # set clock rate
router(config-if)#description STRING
router(config-if)#no shutdown  # enable int
router(config-if)#cdp enable  # enable cdp
router(config-if)#mac-address MAC  # define mac addr

router(config=if)# |no keepalive VALUE  # enable|disable keep-alive, must be equal on both ends
router(config-if)#mtu VALUE  # set packet maximum transmission unit
router(config-if)#ip mtu VALUE  # set ip mtu - not recommended

> Router Engine Configuration mode
router(config-router)# |no auto-summary  # enable|diable auto summary - ripv2, eigrp
router(config-router)#passive-interface default  # set all local ints to passive mode
router(config-router)#passive-interface INT-TYPE  # disallow routing updates for int, passive still advertised
router(config-router)#passive-interface fa0/1  # no router updates sent out fa0/1 interface
