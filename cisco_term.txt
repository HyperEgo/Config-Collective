# Cisco IOS - Router, Switch

# keystrokes
?  # print all commands for curr mode
cmd?  # print cmd word complete options
cmd ?  # print cmd parameter options
cmd PARM?  # print cmd PARM word complete options
cmd PARM1 ?  # print cmd PARM next parameter options
tab  # autocomplete
ctrl+Break  # send interrupt
ctrl+Shift+6, x  #  suspend curr telent|ssh
ctrl+c  # stop cmd process
ctrl+p  # print cmd history
ctrl+n  # print next cmd history 
ctrl+f  # move cursor foward
ctrl+b  # move cursor backward
ctrl+a  # move cursor to first character
ctrl+e  # move cursor to last character
ctrl+r  # refresh cmd line
ctrl+d  # delete single character
esc+b  # move backward one word
esc+f  # move foward one word
SPACE  # move 1 page down

USER -> ENABLE -> GLOBAL Config -> INTERFACE|VLAN|LINE  # CLI modes

# Universal
end|ctrl+z  # move to ENABLE mode
exit  #  move backward one user mode
logout  # log out of terminal session
reload  # reboot device
enable|disable  # enter|exit enable mode
disable  # go to USER mode
shut|no shut  # enable|disable interface
copy run start  # copy running-config to startup-config
copy start run  # copy startup-config to running-config
logging synchronous  # halt device output interruptions during CLI output
show run  # print running-config
show start  # print startup-config
show ip ssh  # print ssh version, auth timeout, retries
show ssh  # print info ea connected ssh client
transport input [all|none|telnet|ssh]  # declare service to support

# erase start configuration
erase startup-config
write erase
erase start
erase nvram:

# set dev to default
erase start
delete vlan.dat
reload

show boot  # print boot ios image
delete flash:vlan.dat  # delete vlan dat - flash mem system restored to default
reload  # reboot switch
terminal monitor  # print console msg varied output

# password only config - basic
dev(config)# line console 0
dev(config-line)# password faith
dev(config-line)# login

dev(config)# line vty 0 15
dev(config-line)# password hope
dev(config-line)# login

# password + username config - advanced e.g. ssh
dev(config)# username USER secret|password PASS
dev(config)# line vty 0 15
dev(config-line)# login local  # enable username, password auth

# ssh config
dev# show crypto key NAME rsa  # print key configurations
dev(config)# hostname HOST
dev(config)# ip domain-name NAME
dev(config)# crypto key generate rsa  # create pub, pvt keys
dev(config)# ip ssh time-out SECONDS  # set ssh time value
dev(config)# ip ssh authentication-retries VALUE

# line config
dev(config)#line console 0 | vty 0 15 | aux 0  # console, virtual term, auxiliary
dev(config-line)# logging synchronous  
dev(config-line)# exec-timeout VALUE  # set terminal time-out value, minutes-seconds
dev(config-line)# exec-timeout 3  # enable time-out - 3 minutes
dev(config-line)# service tcp-keepalives-in  # enable keepalives

???????????????????????????????????????????????????????????????????
???????????????????????????  Huh, wtf  ????????????????????????????
???????????????????????????????????????????????????????????????????
# hostname, banner config - ?
hostname HOSTNAME  # assign a host name
enable password PASS  # set unencrypted enable password
enable secret PASS  # set encrypted enable password
service password-encryption  # encode all passwords except enable secret password
service timestamps  # enable device to generate time stamps on log messages (especially debug messages!)
banner motd_#MESSAGE#  # set motd banner MESSAGE
banner login_#MESSAGE#  # set login MESSAGE, print after motd message
banner exec_#MESSAGE#  # set executive MESSAGE, print after login process

# telnet|ssh - ?
show sessions  # print telnet/ssh sessions w/ conn numbers
show users  # print user log-in list
telnet|ssh IP
resume CON-NUM
resume 1
disconnect CON-NUM
disconnect 1

# Switch Interface Configuration mode - ?
sw(config-if)# mdix auto  # media dependent interface with crossover; enable auto detect, can sense pin-out settings on both ends of link
sw(config-if)# mac-address MAC  # assign static mac address to interface
sw(config-if)# mls qos trust cos  # identifies voice traffic as priority
sw(config-if-range)# switchport voice vlan VLAN  # assign ints to voice vlan

# Router Global Configuration mode - ?
config-register HEX-REG  # boot reg setting; 2100 (rom monitor), 2101 (rom memory/flash), 2102 (nvram), 2142(password recovery/reset)
???????????????????????????????????????????????????????????????????
???????????????????????????  Huh, wtf  ????????????????????????????
???????????????????????????????????????????????????????????????????

# Switch
show dhcp lease  # print dhcp ip address for mngmt vlan
show etherchannel CHAN summary  # print etherchannel stats for channel number

show int status|description  # print int list metrics, protocol, line status
show int INT  # print INT detailed info
show int INT switchport  # print interface per vlan: tags, allowed, native
show int statistics  # print int stats, counters
show int trunk  # print trunking interfaces
show int vlan VLAN  # print vlan metric via interfaces
show vlan  # print vlan, int summary
show vlan brief  # print vlan info, no mtu, RingNo, BridgeNo, mode, etc.
show vlan id VLAN  # print VLAN metrics
show vlan name VLAN-NAME  # print VLAN-NAME metric
show vtp status|counters|password  # print VTP domain status, counters, password 

show mac address-table |dynamic  # print table, dynamice
show mac address-table dynamic address MAC  # print mac addr dynamic metrics
show mac address-table dynamic interface INT  # print table interfaces, dynamic
show mac address-table count|aging-time  # print counter, aging
clear mac address-table dynamic |vlan VLAN|int INT|address MAC # empty category 

show port-security  # print int port sec enabled
show port-security int INT  # print int port sec status

show spanning-tree  # print span tree proto, path cost, int roles, states
show spanning-tree root  # print root  bridge id ea vlan
show spanning-tree active  # print stp stats, active int only
show spanning-tree detail  # print stp path cost
show spanning-tree vlan VLAN  # print stp vlan stats
|no debug spanning-tree events  # enable|disable stp debug
clear spanning-tree detected-protocols  # restart stp proto migration process

## remote access config
sw(config)# ip default-gateway IP  # define default gateway
sw(config)# |no ip domain-lookup  # enable|disable dns lookup
sw(config)# ip domain-name NAME  # declare domain name
sw(config)# interface vlan 1  # management vlan
sw(config-if)# ip address IP MASK
sw(config-if)# no shut
sw(config-if)# duplex half|full|auto  # define int speed
sw(config-if)# speed VALUE  # value in mbps

## vlan mngmt - remote access config
sw(config)# ip default-gateway IP  # no mask, define default gateway for mngmt vlan
sw(config)# int vlan VLAN  # define vlan as int vlan for mngmt
sw(config-if)# ip address IP-NETWORK MASK  # assign ip address to mngmt vlan
sw(config-if)# ip address dhcp  # assign dynamic ip add
sw(config-if)# description DESCR
sw(config-if)# no shut
e.g.>
sw(config)# vlan 99
sw(config)# int vlan 99
sw(config-if)# ip address 192.168.1.1 255.255.255.0
sw(config-if)# description management interface
sw(config-if)# no shut

## vlan trunk - interface config
sw(config-if)# switchport trunk native vlan VLAN  # define interface native vlan
sw(config-if)# switchport trunk allowed vlan VLAN  # define prim vlan interface
sw(config-if)# switchport trunk allowed vlan add VLAD-ID  # add vlan(s) to trunk
sw(config-if)# switchport trunk allowed vlan add|remove|all|except  # select funct
e.g.>
sw(config-if)# switchport trunk native vlan 1
sw(config-if)# switchport trunk allowed vlan 10
sw(config-if)# switchport trunk allowed vlan add 20, 30  

## vlan trunk - mode, native interface
sw(config)# interface range fa0/1-5
sw(config-if-range)# switchport mode trunk
sw(config-if-range)# switchport trunk native vlan 99  # define vlan 99 native trunk
sw(config-if-range)# no shut

## vlan trunk - link type; DTP = dynamic trunking protocol
sw(config-if)# switchport mode trunk|access
sw(config-if)# switchport mode dynamic auto|desirable  # auto negoiate status
sw(config-if)# switchport trunk encapsulation dot1q|isl|negoiate  # define encap
sw(config-if)# switchport nonegoiate  # stop DTP advertise

## vlan mgmnt - interface config, range, type
sw(config)# vlan VLAN 
sw(config-vlan)# name VLAN-NAME
sw(config)# int range RANGE
sw(config-if-range)# switchport mode access  # type access only, no trunking
sw(config-if-range)# switchport access vlan VLAN  # assign curr int to access vlan
sw(config-if-range)# no shut
e.g.>
sw(config)# vlan 10
sw(config-vlan)# name faculty
sw(config)# int range fa0/1-5  # ports must physicall exist! e.g. no fa0/0
sw(config-if-range)# switchport mode access
sw(config-if-range)# switchport access vlan 10
sw(config-if-range)# description faculty usage
sw(config-if-range)# no shut

## port-security
sw(config-if)# switchport mode access  # define int type 
sw(config-if)# switchport port-security  # enable port security 
sw(config-if)# switchport port-security maximum NUM  # define mac addr max number
sw(config-if)# switchport port-security mac-address MAC  # define port sec via mac addr
sw(config-if)# switchport port-security mac-address sticky  # enable 'sticky' learning
sw(config-if)# switchport port-security violation protect|restrict|shutdown  # define action for non-port-sec ports

## VTP - vlan trunking protocol
sw(config)# vtp mode server|client|transparent  # define vtp mode
sw(config)# vtp domain DOMAIN  # assign vtp domain name
sw(config)# vtp password PASS  # configure vtp domain password
sw(config)# vtp version VER  # assign vtp version number
sw(config)# vtp pruning  # enable vtp pruning

## STP - spanning tree protocol, auto enable
sw(config)# spanning-tree mode MODE  # define stp mode
sw(config)# spanning-tree mode rapid-pvst  # enable rstp, pvrst
sw(config)# spanning-tree vlan VLAN root primary|secondary  # assign prim, second root bridge contender
sw(config)# spanning-tree vlan VLAN root primary diameter VALUE  # assign net diameter for root bridge
e.g.>
sw(config)# spanning-tree vlan 1 root primary diameter 5  # set switch network diameter to 5
sw(config)# spanning-tree vlan VLAN priority VALUE  # assign priority value
sw(config-if)# spanning-tree link type LINK  # define inteface link type
e.g.>
sw(config-if)# spanning-tree link type point-to-point  # port role point-to-point
sw(config-if)# spanning-tree vlan VLAN cost COST  # define inteface vlan port cost
e.g.>
sw(config-if)# spanning-tree vlan 1 cost 2
sw(config-if)# spanning-tree port-priority VALUE  # configure port priority value
e.g.>
sw(config-if)# spanning-tree port-priority 105
sw(config-if)# spanning-tree portfast  # configure portfast, access ports (end user nodes)
sw(config-if)# spanning-tree bpduguard enable  # enable bpdu guar

## etherchannel config - STP auto enable
sw(config-if)# channel-group GROUP mode on|auto|desirable  # etherChannel int/ports config
e.g.>
sw1(config)# int range fa0/1-15
sw1(config-if-range)# channel-group 1 mode desirable
sw2(config)# int range fa0/9
sw2(config-if-range)# channel-group 1 mode auto

# Router
boot system  # define boot sequence (use cmd in succession)
debug ip routing  # start ip routing proto debug
debug ip PROTOCOL  # debug routing protocol
debug ppp  # enable ppp debug
debug ppp packet|authentication  # print send, receive packets, link debug stats

clear ip route*  # delete dynamically learned routing table entries
clear ip route IP  # delete ip route from routing table

show access-lists  # print access list(s) contents
show ip access-lists  # print ip access list(s) contents

show clock  # print dev time
show clock_rate  # print clock rate for DCE connections
show controllers INT  # print DCE capability, clockrate info

show hosts  # print host ip name map
show int INT  # print int stats, including acl
show ip host  # print ip stats
show ip int brief  # print short ip assignments 
show ip protocols  # print proto network advertise 
show ip route  # print routing table
show ip route IP-NET  # print network addr routing stats

show ip rip database  # print rip database
|no debug ip rip  # enable|disable debug

show ip eigrp int  # print eigrp ints
show ip eigrp neighbors  # print eigrp neighbors, successors
show ip eigrp topology  # print successors,f easible successors
show ip eigrp topology IP-NET  # print network addr status + ext route info
show ip eigrp topology all-links  # print all links
show ip eigrp traffic  # print traffic stats
|no debug eigrp fsm|packet  # enable|disable debug

show ip ospf  # print algorithm execution metric, link state interval status
show ip ospf interface brief
show ip ospf interface INT  # print int stats
show ip ospf neighbor  # print ospf neighbors
show ip ospf neighbor detail  # print neighbor list, priority, state value
show ip ospf database  # print routing proto net contents
|no debug ip ospf hello|packets|events  # enable|disable ospf debug
clear ip ospf process  # delete router id

show ip dhcp binding  # print host ip addr to mac addr bindings
show ip dhcp pool  # print dhcp pool stats
show ip dhcp conflict  # print addr conflicts
show dhcp server  # print dhcp server ip, lease agreements, counters
debug ip dhcp server events|packets|linkage  # print addr assignments, db updates stats 

show ipv6 route |IP|MASK  # print route contents
show ipv6 int |INT
show ipv6 int brief
show ipv6 route |summary  # print routing table - summary
show ipv6 static |IP|INT  # print installed static routes
show ipv6 static detail  # print static route detail
show ipv6 protocols  # print routing protocol
show ipv6 rip
show ipv6 neighbors  # print neighbor discovery cache
show ipv6 routers  # print advertisements
show ipv6 traffic  # print traffic stats
clear ipv6 rip  # delete rip routing table
clear ipv6 route*  # delete all routing table routes
clear ipv6 route IP  # delete specific route
clear ipv6 traffic  # reset traffic counters
debug ipv6 rip  # print debug msg
debug ipv6 packet  # print debug msg
debug ipv6 routing  # print debug msg, cache updates

show process  # print physical mem allocation
show protocols  # print int proto status
show version  # print IOS version, hd, dev info
show flash  # print flash mem allocation 
dir flash:  # print flash mem file list

ping  # define ping execution
ping IP  # send ping to specified address
ping ip IP # extended ping, ping target addr from source 
traceroute  # use extended version to specify destination and source
traceroute IP  # trace route of input IP address
terminal ip netmask-format decimal  # print network masks, dotted decimal format
terminal monitor  # enable log, debug, alert msg print to screen

ip host NAME IP  # IP host to NAME map
ip default-network IP-NET  # assign net add, df gw
service timestamps log|debug  # enable time stamps, logging, debugging msg

no router PROTOCOL  # disable routing protocol

## boot mgmnt
reload  # reboot
setup  # enter setup mode
auto secure  # enable security features, disable inactive services

## file mgmnt
show file system  # print file systems, memory allocated to each file
pwd  # present working directory, use to verify presence current directory
dir  # directory listing
cd nvram:  # change directory to nvram
debug  # start debug, not recommended
undebug all  # disable debug

## SDM - Security Device Manager
rtr(config)# ip http server|secure server|authentication local
rtr(config)# username USER privilege NUM secret PASS
rtr(config)# line vty 0 15
rtr(config-line)# privilege level NUM
rtr(config-line)# login local
rtr(config-line)# transport input telnet ssh

## transfer files
rtr# copy run tftp  # copy run cfg to tftp server
rtr# copy tftp run  # copy run cf from tftp server
rtr# copy tftp flash  # copy tftp file to flash mem
rtr# copy flash tftp  # copy flash file to tftp server

## default, static routes
rtr(config)# ip route IP-NET MASK IP-HOP INT ADMIN  # assign admin dist for route
e.g.>
rtr(config)# ip route 10.1.3.0 255.255.255.0 10.1.130.253 210
rtr(config)# ip route 0.0.0.0 0.0.0.0 s0/0  # assign default route to serial 0/0
rtr(config)# ip route 0.0.0.0 0.0.0.0 lo0  # create default route to lo0 exit int, traffic discarded
rtr(config)# ip route 172.16.0.0 255.255.0.0 s0/1  # create default route to exit int
rtr(config-router)# default-information originate  # propagate def route to neighbors
rtr(config-router)# redistribute static  # advertise static routes to neighbors

## bit bucket config
rtr(config)# ip route IP-NET MASK Null0  # send traffic to bit bucket 
e.g.>
rtr(config)# ip route 192.168.1.0 255.255.255.0 Null0

## boot sequence config
rtr(config)# boot system flash  # boot most recent ios file
rtr(config)# boot system flash FILE  # boot specific ios file
rtr(config)# boot system tftp FILE IP  # boot ios file from tftp server
rtr(config)# boot system rom  # boot rom monitor mode

## loopback int config
rtr(config)# int INT-LOOP  # define loopback int
rtr(config-if)# ip address IP-NET MASK  # assign ip address to loopback int
e.g.>
rtr(config)# interface lo0  # loopback 0 int
rtr(config-if)# ip address 10.0.0.1 255.0.0.0  # use full 32-bit mask, loopback int

## ppp - Point-to-Point protocol
rtr(config)# username NAME password PASS  # define ppp metrics, pap|chap auth
rtr(config-if)# encapsulation ppp  # define ppp encap
rtr(config-if)# ppp authentication chap|pap  # enable chap|pap
rtr(config-if)# compress predictor|static  # enable ppp compress proto
rtr(config-if)# ppp mulitlink  # enable multi-link load balance 
rtr(config-if)# ppp quality VALUE  # define link quality
e.g.>
rtr(config-if)# ppp quality 80  # monitor link, packet drop exceed 20% shutdown link 

## HDLC - High-Level Data Link Control
rtr(config-if)# encapsulation hdlc  # enable HDLC link encap 

## RIP2
rtr(config)# router rip
rtr(config-router)# version 2  # enable rip version 2
rtr(config-router)# no auto-summary  # disable auto summary
rtr(config-router)#network IP-NET  # no mask

## EIGRP
rtr(config)# router eigrp AS-VAL  # assign eigrp Autonomous System number
rtr(config-router)# network IP-NET MASK  # define routed network ips
rtr(config-router)# maximum-paths  # define equal load cost balancing paths
rtr(config-router)# metric weights tos  # define bandwith delay metrics
rtr(config-if)# |no bandwith VALUE # enable|disable bandwith value, kbps
rtr(config-if)# delay VALUE  # set delay value, tens of microseconds
rtr(config-if)# ip summary-address eigrp AS-VAL IP-NET MASK  # summarize nets per int
e.g.>
rtr(config-if)# ip summary-address eigrp 1 192.168.0.0 0.0.255.255

rtr(config-if)# |no ip bandwidth-percent eigrp AS-VAL  # set update bandwidth pct
e.g.>
rtr(config-if)# ip bandwidth-percent eigrp 1 50  # set update  bandwidth limit 50 pct

rtr(config-if)# ip hello-interval eigrp AS-VAL  # define hello packet interval, sec
e.g.> 
rtr(config-if)# ip hello-interval eigrp 1 60

rtr(config-if)# ip hold-time eigrp AS-VAL  # define hold-time, sec
e.g.> 
rtr(config-if)# ip hold-time eigrp 1 180

## OSPF protocol - wildcard masking
rtr(config)# router ospf PROC-ID  # set local process id
rtr(config-router)# network [network address_wild card mask_area id]  # advertise network through ospf
rtr(config)# router ospf 1 
rtr(config-router)#network 172.16.1.16 0.0.0.15 area 0  # backbone area denoted with "0"

rtr(config-if)# |no bandwidth VALUE  # modify bandwidth per interface in kbps
rtr(config-if)# ip ospf cost VALUE  # modify cost value per interface
rtr(config-if)# ip ospf hello-interval VALUE  # modify hello interval in seconds
rtr(config-if)# ip ospf dead-interval VALUE  # dead interval is 4 times hello interval, usually no need for modification

## OSPF NMBA = non-broadcast multiple access
rtr(config-if)# ip ospf priority 0-255  # assign ospf int priority value
rtr(config-if)# ip ospf network point-to-multipoint  # enable net type
rtr(config-router)# router-id IP  # assign ip address to router id
rtr(config-router)# neighbor IP  # no mask, identify neighbor router, no multicast

## RIP auth
rtr(config)# key chain RIP_KEY
rtr(config-keychain)# key 1
rtr(config-keychain-key)# key-string cisco
rtr(config-if)# ip rip authentication mode md5
rtr(config-if)# ip rip authentication key-chain RIP_KEY

## EIGRP auth
rtr(config)# key chain EIGRP_KEY
rtr(config-keychain)# key 1
rtr(config-keychain-key)# key-string cisco
rtr(config-if)# ip authentication mode eigrp 1 md5
rtr(config-if)# ip authentication key-chain eigrp 1 EIGRP_KEY

## OSPF auth
rtr(config-if)# ip ospf authentication-key PASS  # set ospf router auth password
rtr(config-if)# ip ospf message-digest key KEY md5 PASS  # encrypt router pd auth
rtr(config-router)# area AREA authentication  # enable area wide auth
e.g.>
rtr(config-if)# ip ospf message-digest-key 1 md5 cisco
rtr(config-router)# area 0 authentication message-digest

## DHCP
rtr(config)# |no service dhcp  # enable|disable dhcp server
rtr(config-if)# ip address dhcp  # enable client
rtr(config-if)# ip helper-address IP  # send broadcasts, default router
rtr(config-if)# ip forward-protocol IP  # define forward port(s)

rtr(config-dhcp)# network IP-NET MASK  # define pool net addr
rtr(config-dhcp)# default-router IP # define default router
rtr(config-dhcp)# lease days|hours|minutes|infinite  # define lease period
rtr(config)# ip dhcp excluded-address IP-START IP-END  # define exclude range
rtr(config)# ip dhcp pool NAME # define pool NAME
rtr(dhcp-config)# network IP MASK
rtr(dhcp-config)# dns-server IP MASK
rtr(dhcp-config)# default-router IP MASK
e.g.>
rtr(config)# ip dhcp excluded-address 192.168.10.1 192.168.10.10
rtr(config)# ip dhcp pool R1Fa0
rtr(dhcp-config)# network 192.168.10.0 255.255.255.0
rtr(dhcp-config)# dns-server 192.168.11.5
rtr(dhcp-config)# default-router 192.168.10.1

## NAT
rtr#s how ip nat translations  # print nat mappings
rtr# show ip nat translations verbose
rtr# show ip nat statistics  # print active translations, pool addr
rtr# clear ip nat translations *  # clear dynamic translations
rtr# |no debug ip nat  # enable|diable debug
rtr# debug ip nat detailed
rtr(config)# ip nat translation time VALUE  # define timeout, seconds

### static
rtr(config)# ip nat inside source list static IP-INSIDE IP-OUTSIDE  # define static map
rtr(config)# ip nat inside source list static 192.168.20.254 209.165.200.254

### dynamic
rtr(config)# ip nat pool NAME IP-START IP-END netmask MASK  # define translate  pool
rtr(config)# ip nat inside source list ACL-NAME pool POOL-NAME  # define acl translate

### NAT w/ ACL
rtr(config)# ip access-list extended LIST  # apply acl LIST
rtr(config-ext-nacl)# permit ip 192.168.10.0 0.0.0.255 any  # define pvt host addr
rtr(config-ext-nacl)# permit ip 192.168.11.0 0.0.0.255 any
rtr(config)# ip nat pool POOL 209.165.200.241 209.165.200.246 netmask 255.255.255.248
rtr(config)#ip nat inside source list NAT-LIST pool POOL

### PAT dynamic
rtr(config)# access-list 10 permit 192.168.0.0 0.0.255.255  # define acl pvt ip host
rtr(config)# ip nat inside source list 10 interface serial0/1/0 overload  # enable pub int
rtr(config)# int fa0/1
rtr(config-if)# ip nat inside
rtr(config-if)# int s0/1/0
rtr(config-if)# ip nat outside

rtr(config)# access-list 10 permit 192.168.0.0 0.0.255.255  # define pool
rtr(config)# ip nat pool POOL2 209.165.200.226 209.165.200.240 netmask 255.255.255.248
rtr(config)# ip nat inside source list 10 pool POOL2 overload  # enable pub ip pool
rtr(config)# int s0/0/0
rtr(config-if)# ip nat inside
rtr(config-if)# int s0/1/0
rtr(config-if)# ip nat outside

## ACL - implicit "deny all"
rtr(config)# access-list 101 permit ip 10.2.2.0 0.0.0.3 any
rtr(config)# access-list 101 permit ip 192.168.30.0 0.0.0.255 any
rtr(config)# line vty 0 15
rtr(config-line)# access-class 101 in  # enable acl on inbound int

### Numbered, named 
rtr(config)# no access-list 101  # delete acl
rtr(config-if)# no ip access-group 101 in  # remove acl from int BEFORE edit

rtr(config)# access-list NUM permit|deny IP WILDCARD  # define acl numbered
rtr(config)# access-list 10 permit 192.168.30.0 0.0.0.255
rtr(config-if) #access-group 10 in

rtr(config)# access-list NUM permit|deny PROTOCOL IP-SRC IP-DEST eq PORT
rtr(config)# access-list 101 permit tcp 192.168.30.0 0.0.0.255 any ep 80
rtr(config-if)# access-group 101 in  # apply to inbound int

rtr(config)# access-list 101 permit ip 10.2.2.0 0.0.0.3 any
rtr(config)# access-list 101 permit ip 192.168.30.0 0.0.0.255 any
rtr(config)# line vty 0 4
rtr(config-line)# access-class 101 in  # apply to inbound telnet lines

rtr(config)# ip access-list standard NAME  # define acl named
rtr(config)# ip access-list standard ACLNAME
rtr(config-std-nacl)# deny IP WILDCARD log  # deny, print log message
rtr(config-if)# ip access-group ACLNAME in  # apply to inbound int

rtr(config-std-nacl)# deny 192.168.11.0 0.0.0.255 log
rtr(config-std-nacl)# permit any  # deny source then permit any
rtr(config-if)# ip access-group ACLNAME in

rtr(config)# ip access-list extended ACLNAME  # define acl extended named
rtr(config-ext-nacl)# deny IP WILDCARD host IP  # deny src to host, no host mask
rtr(config-if)# ip access group NAME out  # apply to outbound int

rtr(config)# ip access-list extended ACLNAME
rtr(config-ext-nacl)# deny 192.168.10.0 0.0.0.255 host 209.165.200.225
rtr(config-if)# ip access-group ACLNAME out

rtr(config)# access-list NUM REMARK  # define remark, view contents w/ 'show run'
rtr(config)# access-list 10 remark permit hosts from network 192.168.10.0
rtr(config)# access-list 10 permit 192.168.10.1 255.255.255.0

rtr(config)# ip access-list extended ACLNAME 
rtr(config-ext-nacl)# remark this acl blocks bob from telnet access
rtr(config-ext-nacl)# deny tcp host 192.168.10.13 any eq telnet

rtr(config)# ip access-list standard 24  # define acl standard named w/ number
rtr(config-std-nacl)# permit 10.1.1.0 0.0.0.255
rtr(config-std-nacl)# permit 10.1.2.0 0.0.0.255
rtr(config-std-nacl)# deny any
rtr(config-std-nacl)# do show ip access-list 24  # exec 'do', print contents, no exit

rtr(config-line)# autocommand access-enable host timeout VALUE  # enable timeout
rtr(config)# access-list NUM permit|deny ACL-EXT  # assign number to extended acl
rtr(config)# access-list NUM dynamic testlist timeout VALUE permit|deny ACL-EXT

rtr(config)# access-list 101 permit tcp any host 10.2.2.2 eq telnet
rtr(config)# access-list 101 dynamic testlist timeout 15 permit ip any any
rtr(config)# int s0/0/1  # point to incoming telnet clients
rtr(config-if)# access-group 101 in

rtr(config)# ip access-list extended OUT-FLTR  # define acl extended for reflexive
rtr(config-ext-nacl)# permit tcp 192.168.0.0 0.0.255.255 any reflect TCP-TRAF
rtr(config-ext-nacl)# permit icmp 192.168.0.0 0.0.255.255 any reflect ICMP-TRAF
rtr(config)# ip access-list extended IN-FLTER
rtr(config-ext-nacl)# evaluate TCP-TRAF  # map out filter tcp traff to inbound filter

rtr(config-ext-nacl)# evaluate ICMP-TRAF
rtr(config)# int s0/1/0
rtr(config-if)# ip access-group IN-FLTER in
rtr(config-if)# ip access-group OUT-FLTR out

rtr(config)# time-range TOG-DAY  # define acl time based
rtr(config-time-range)# periodic Monday Wednesday Friday 8:00 to 17:00  # time boundary
rtr(config)# access-list 101 permit tcp 192.168.10.0 0.0.0.255 any eq telnet time-range TOG-DAY
rtr(config)# int s0/0/0
rtr(config-if)# ip access-group 101 out

## e.g.>
rtr(config)# access-list 101 remark allow http and telnet access
rtr(config)# access-list 101 permit tcp 192.168.1.0 0.0.0.255 10.1.1.0 0.255.255.255 eq 80 
rtr(config)# access-list 101 permit tcp 192.168.2.0 0.0.0.255 10.1.1.0 0.255.255.255 eq 23 
rtr(config)# access-list 101 deny ip any any  # add to view counter increment

rtr(config)# access-list 102 remark allow outbound traffic to return only from 172.22.10.0
rtr(config)# access-list 102 permit tcp any 172.22.10.0 0.0.0.255 established
rtr(config)# access-list 102 deny ip any any

rtr(config)# access-list 120 permit tcp any gt 1023 host 10.1.3.2 eq 22  # permit any src port > 1023 to host
rtr(config)# access-list 120 permit tcp any any eq 25
rtr(config)# access-list 120 deny ip any any

rtr(config)# access-list 121 remark stop any src from using ping or traceroute comms to query e-commerce server
rtr(config)# access-list 121 deny icmp any host 172.16.1.1  # deny icmp traffic from any srce to host
rtr(config)# access-list 121 permit ip any any

rtr(config)# access-list 122 permit udp 1.0.0.0 0.255.255.255 lt 1023 any eq 53  # permit any source port < 1023 to host
rtr(config)# access-list 122 deny ip any any

rtr(config)# access-list 123 remark allow any src traffic to any dest for dhcp, tftp, and snmp,  deny everything else
rtr(config)# access-list 123 permit udp any any eq 67
rtr(config)# access-list 123 permit udp any any eq 68
rtr(config)# access-list 123 permit udp any any eq 69
rtr(config)# access-list 123 permit udp any any eq 161
rtr(config)# access-list 123 deny ip any any

rtr(config)# ip access-list extended LCL-AREA
rtr(config-ext-nacl)# remark deny ftp, management traffic, permit everything else
rtr(config-ext-nacl)# deny tcp 10.1.1.0 255.0.0.0 any eq 20  # ftp data
rtr(config-ext-nacl)# deny tcp 10.1.1.0 255.0.0.0 any eq 21  # ftp
rtr(config-ext-nacl)# deny udp 10.1.2.0 255.0.0.0 any eq 161
rtr(config-ext-nacl)# permit ip any any

## IPv6
rtr(config)# ipv6 unicast-routing  # enable forwarding
rtr(config)# ipv6 router rip NAME
rtr(config-if)# ipv6 rip NAME enable  # enable rip proto
rtr(config-if)# ipv6 address IP PREFIX eui-64  # define ip eui format

rtr(config-if)# ipv6 address IP MASK  # enable ipv6
rtr(config-if)# ip address IP MASK secondary  # enable secondary ipv4 addr
rtr(config-if)# ip address 10.1.7.252 255.255.255.0 secondary

rtr(config-if)# clock rate VALUE
rtr(config-if)# description DESCR
rtr(config-if)# mac-address MAC  # define mac addr

rtr(config-if)# |no keepalive VALUE  # enable|disable keep-alive, equal link ends
rtr(config-if)# mtu VALUE  # set maximum transmission unit
rtr(config-if)# ip mtu VALUE  # set ip mtu - not recommended

rtr(config)# router PROTOCOL  # enter router engine mode
rtr(config-router)# |no auto-summary  # enable|diable auto summary
rtr(config-router)# passive-interface default  # set all ints to passive
rtr(config-router)# passive-interface TYPE  # stop route updates for TYPE
rtr(config-router)# passive-interface fa0/1  # no router updates for  fa0/1
