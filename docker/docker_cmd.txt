Docker commands

// tag convention => registry.example.com:port/organization/image-name:version-tag
docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]  // tag image
docker image tag SOURCE-IMAGE:TAG TARGET-IMAGE:TAG

groupadd docker  // create new docker group - optional (may already exist)
usermod -aG docker $USER  // append docker group to user acc (re-login)

man dockerfile
man docker build

docker ps // list running containers
docker ps -l  // list lastest running containers
docker ps -a  // list all containers
docker ps -s  // list total file size

docker run hello-world  // test successfull install
docker version
docker info  // show stats: containers running, stopped, server version, etc.
docker search ubuntu  // search online repo
docker search --filter "stars=80" --filter "is-official=true" ubuntu  // filter ubuntu img w/ 80+ stars
docker search --limit=25 ubuntu  // limit search results

docker images  // list images
docker image ls <NAME>  // show info for specific image
docker image COMMAND  // e.g. docker image build|history|import...
docker inspect [OPTIONS] <NAME|ID>  // inspect image
docker rmi IMAGE-ID  // remove image(s)

docker container COMMAND  // e.g. docker container attach|commit|cp|create..

docker logs [OPTIONS] CONTAINER  // see logs of container (even if exited)
docker logs -f IMAGE  // show log details for image
docker attach [OPTIONS] CONTAINER  // jump in to running container
docker exec [OPTIONS] CONTANER COMMADN [ARG..]
docker exec -ti CONTAINER bash  // attach process to running container, [i]nteractive, psuedo [t]ty
docker kill CONTAINER  // kill container
docker rm CONTAINER  // remove container
docker commit [OPTIONS] CONTAINER IMAGE-NAME | IMAGE-ID:TAG  // create new image from container's changes

docker run --memory maximum-allowed-memory IMAGE-NAME COMMANDS
docker run --rm -ti -p [container port] --name IMAGE-NAME:TAG COMMANDS  // open container ports, [rm]=remove on exit
docker run --rm -ti -p [host:container port] --name IMAGE-NAME:TAG COMMANDS

docker run --name example -d ubuntu bash -c "less /etc/password"
docker run --rm -ti ubuntu:latest // run container, delete container when exiting
docker run -ti -p 8080 -w /home ubuntu:14.04 bash  // run ubuntu img, working dir='/home', prompt=bash, port 8080 open
docker run -ti ubuntu:latest bash  // run image, [t]erminal, [i]nteractive
docker run -ti ubuntu bash -c "sleep 3; echo all done"  // run container, execute bash cmds
docker run -p 1234:1234/udp
docker run -p 127.0.0.1:1234:1234/tcp  // make pvt service pvt to a container

docker run -d -ti ubuntu bash  // run container, detached mode (daemon), will not enter container
docker run -d -p 5000:5000 --restart=always --name registry registry:2  // run local registry container, restart if fail

docker stop CONTAINER-ID  // stop container

docker rmi -f CONTAINER-ID  // remove container from local repo, [f]orce

docker pull <img name>:<tag>
docker push IMAGE-NAME | IMAGE-ID:TAG  // push img to registry

docker save -o IMAGE-ID | IMAGE-NAME  // save image to tar file, [o]utput string
docker save -o archive.tar.gz debian:sid busybox ubuntu:14.04  // save img to archive
docker load -i my-images.tar.gz  // load img from register, [i]nput string
docker import /path/to/exampleimage.tgz  // import image from tarball to registry

docker container export IMAGE-NAME > ARCHIVE  // export container file system to archive
docker container export jovial_jackson > nginx.tar
docker image import ARCHIVE  // import img from archive
docker image import nginx.tar  // may have to name, tag img after import

docker build -f /path/to/Dockerfile .  // execute container build, include dependencies in docker file
docker network ls  // list all networks known to docker (Engine daemon)
docker volume ls  // list all volumes known to docker


docker port CONTAINER [PRIVATE_PORT[/PROTO]]  // list active ports
docker port echo-server
~> 45678/tcp -> 0.0.0.0:32770  // image port 45678 open to any ip at port 32770
~> 45679/tcp -> 0.0.0.0:32769

// link ports via container - p1 => <outside-host:inside-container>
docker run --rm -ti -p 45678:45678 -p 45679:45679 --name echo-server ubuntu:14.04 bash  // start, open ports 
container# nc -lp 45678 | nc -lp 45679  // netcat, listen on ports, forward data from 45678 to 45679
pc1> nc localhost 45678
pc1> nc localhost 45679
curl localhost:45678  // test port number

// link ports via container - p2
docker run --rm -ti ubuntu:14.04 bash
container# nc 10.35.3.24 45678  // netcat listen ip, port
container# nc 10.35.3.24 45679

// link containers directly
docker run --rm -ti --name server ubuntu:14.04 bash  // start first container
docker run --rm -ti --link server --name client ubuntu:14.04 bash  //start and link second container

// link containers, pvt networks
docker network COMMAND  // e.g. docker network connect|create|disconnect|inspect|prune..
docker network create example
docker run --rm -ti --net=example --name server ubuntu:14.04 bash
container1# nc -lp 1234
docker run --rm -ti --link server --net=example --name client ubuntu:14.04 bash
container2# nc server 1234

// shared volumes w/ host
docker run -ti -v PATH-TO-VOLUME:PATH-TO-SHARED-FOLDER IMAGE COMMANDS
docker run -ti -v /usr/daveg/example:/shared-folder ubuntu bash
docker run -ti -p 8080 -v /home/ninjaboy/shared-volume:/home -w /home ubuntu:14.04 bash

// shared volumes btwn containers
docker run -ti --name sick_hopper -v /shared-volume ubuntu bash
container1# echo "hello" >> /shared-volume/data-file.txt
docker run -ti --volumes-from sick_hopper ubuntu bash


// docker compose - yaml
apt install docker-compose
docker-compose up | down -d // run .yml file, -d=background daemon
docker-compose scale confluence-test=6
docker-compose logs -f --tail=all
docker-compose exec confluence bash  // attach shell instance to running container|image

// hot-keys
ctrl+p, ctrl+q  // hotkey, detach from running container


