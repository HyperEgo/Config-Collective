# Docker terminal

# Keystrokes
ctrl + p|q  # detach from running container

# CLI commands
IMG = ID|NAME:TAG
docker 
  attach CNTR  # jump in to container
  build 
    -f /path/to/Dockerfile .  # build image [f]rom Dockerfile
    -t IMG_name:tag  e.g. my-new-image:latest    
  commit CNTR IMG  # create new image from container
  exec -ti CNTR bash  # attach process to container, [i]nteractive, [t]erminal
  export CNTR > ARCH.tar  # export container to archive
  images  # print images, local repo
  image history IMG
  image ls IMG  # print image info
  import /path/to/image  # import one image into local docker repo
  info  # print container stats: running, stopped, server version
  inspect IMG  # inspect image
  kill CNTR  # kill container
  load -i IMG  # load (multiple) image(s) into local docker repo, [i]nput
  logs |-f IMG|CNTR  # print docker entity logs [f]orce
  network disconnect bridge CNTR  # disable running container network access
  network ls  # list networks
  port CNTR IMG PORT|PROTO  # list active ports, protocols
  ps |-l|a|s # print curr containers, [l]atest, [a]ll, [s]ize total
  pull IMG  # pull image from remote docker repo
  push IMG  # push image to remote docker repo
  rm CNTR  # remove container
  rmi -f IMG  # remove image from local docker repo, [f]orce
  run OPT IMG CMD
  run hello-world  # run test image, verify docker install
    --rm -ti -p HOST|:CNTR --name IMG CMD  # [rm]=remove on exit, [t]erminal, [i]nteractive, open [p]orts
    --rm -ti -p 127.0.0.1:1234:1234/tcp -w /tmp --name IMG bash
    --rm -ti -p 8080 -w /home ubuntu:14.04 bash
    -p 8080 -ti -v /share/docker:/home -w /home ubuntu:20.04 bash
    -p 1234:1234/udp -ti -w /home IMG bash
    -ti -w /home IMG bash -c "sleep 3; echo all done"  # execute bash cmd
    -d ubuntu --name IMG bash -c "less /etc/password"
    -d -ti ubuntu bash  # [d]etached mode, do not enter
    -d -p 5000:5000 --restart=always --name registry registry:2  # restart if fail
    --memory maximum-allowed-memory IMG CMD
  save -o IMG /path/to/local/dir  # save image to local device
  search STR  # search online regsitry
    --filter "stars=8" --filter "is-official=true" ubuntu  # filter ubuntu img w/ 8+ stars
    --limit=25 ubuntu  # limit search results
  stop CNTR  # stop container
  volume ls  # list volumes

# Tags
convention => registry.example.com:port/organization/image-name:version-tag
docker tag IMG:TAG
docker image tag IMG1:TAG1 IMG2:TAG2

# Add User to docker group
sudo groupadd docker  # create docker group (may already exist)
sudo gpasswd -a USER docker  # append docker group to USER
newgrp docker  # avoid logout|in to affect group change
docker run hello-world  # test, no sudo

# Containers connect - ports
docker run --rm -ti -p OUT:IN
 -p 45678:45678 -p 45679:45679 --name echo-server ubuntu:14.04 bash  # container 1 start
CNTR1# nc -lp 45678 | nc -lp 45679  # netcat - listen ports 45678, 45679
pc> nc localhost 45678  # set connection port from pc to container
  nc localhost 45679
  curl localhost:45678  # test port from pc to container
__

docker run --rm -ti ubuntu:14.04 bash  # container 2 start
CNTR2# nc 10.35.3.24 45678  # set connection port from container 2|host ip to container 1
CNTR2# nc 10.35.3.24 45679

# Containers connect - direct
docker run --rm -ti --name server ubuntu:14.04 bash  # container 1 start
  --link server --name client ubuntu:14.04 bash  # container 2 start

# Containers connect - pvt network
docker network create faux-net
docker run --rm -ti --net=faux-net --name server ubuntu:14.04 bash
CNTR1# nc -lp 1234
docker run --rm -ti --link server --net=faux-net --name client ubuntu:14.04 bash
CNTR2# nc server 1234

# Shared volumes - host + containers
docker run -ti -p PORT -v path/to/local/volume:path/to/container/dir -w WORK-DIR IMG CMD  # share btwn host and multiple containers
  -ti -p 8080 -v /share/docker:/home -w /home ubuntu:14.04 bash  # shared [v]olume
  -ti -v /share/docker:/home ubuntu bash

# Compose - execute Dockerfile or YAML
apt install docker-compose
docker-compose up|down -d # execute yaml as [d]aemon background proc
  scale confluence-test=6
  logs -f --tail=all
  exec confluence bash  # attach shell + confluence to running container
