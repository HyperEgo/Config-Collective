# Git terminal

WORKING-DIR => STAGED => LOCAL repo => REMOTE repo
create | edit -> add -> commit -> push

untracked files = working dir
tracked files = repo

/etc/gitconfig  # global config, enterprise
~/.gitconfig  # local config

 A Added
 C Copied
 D Deleted
 M Modified
 R Renamed
 T have their type (mode) changed
 U Unmerged
 X Unknown
 B have had their pairing Broken
 * All-or-none
--diff-filter=[ACDMRTUXB*]

git show --pretty --name-only SHA  # print commit files
git show BCH|SHA  # print commit details
git show REV:path/to/FILE  # print FILE from REV

git diff --name-only --diff-filter=U --relative  # print file conflicts, pre-merge
git diff |--staged|--color-words  # compare to repo: working, staged, use color words

git config --global CMD  # config global git parms e.g. ~/.gitconfig
git config --global --unset CMD  # remove cmd
git config --list  # print global creds
git config --get remote.origin.url  # display upstream url for remote named 'origin'
git config http.sslVerify "false"
git config credential.helper cache

git log BCH  # print BCH logs

git branch BCH  # create branch, stay on current
git branch -m BCH NEW_BCH  # rena[m]e branch
git branch |a|d|r|--merged  # print curr branch, [a]ll, [d]el, [r]emote
git branch -d|D BCH  # delete local branch

git checkout BCH  # switch to branch
git checkout -b BCH  # create [b]ranch, check it out
git checkout -b SUB BCH  # checkout subordinate branch from "main" branch
git checkout HEAD -- FILE  # checkout FILE from HEAD, overwrite working dir

git add FILE  # add file
git rm FILE  # remove file from staged to working dir (e.g. after commit, before push)
git clean -f  # remove [f]iles from working dir

git commit [no arg]  # open editor, use after 'git merge --squash BCH', prune commit comments
git commit -m MSG  # commit files to curr branch w/ [m]essage
git commit -am MSG  # commit all modified files, no new or deleted files
git commit --amend -m MSG  # amend to most recent commit

git merge BCH  # merge branch to curr (**danger, verify curr branch BEFORE executing)
git merge --no-ff BCH  # execute merge, no fast forward
git merge --ff-only BCH  # execute merge, only fast forward merge, abort otherwise
git merge --abort  # abort merge
git merge --squash BCH  # add but no commit changes, prelim to 'git commit' [no arg]

git remote -v  # print remotes, curr branch
git remote add ALIAS REMOTE  # add ALIAS for REMOTE
git remote rm ALIAS  # remove remote ALIAS
git remote add REMOTE URL # add REMOTE w/ URL
e.g.> git remote add origin URL

git push -d RMT BCH  # delete remote branch on server
git push ALIAS --delete REMOTE  # keep local alias, delete remote
git push -u RMT BCH  # push BCH to REMOTE, [u]pstream tracking
e.g.> git push -u origin master
e.g.> git push --set-upstream origin master  # set upstream remote named 'origin' for 'master' branch

git clone URL  # clone repo, assume MASTER branch
git clone -b BCH URL DIR  # clone repo to directory
git clone -b BCH --single-branch URL  # clone specific branch

git fetch ALIAS  # sync with remote to "origin/master" NOT master
git pull = git fetch + git merge

## create local repo
git init .
git add -A .
git commit -m "first commit"
git push

## create remote repo, local exclusive
remote> git init --bare  # bare repo, no working dir
local> git remote add origin URL  # add remote named 'origin' for remote URL
local> git remote -v  # list 'pull', 'fetch' connected remotes
local> git push origin master  # push changes to remote named 'origin' on 'master' branch

## create remote repo, shared
mkdir -p /share/devrepo.git
sudo chgrp GRP /share/devrepo.git  # set dir group name
sudo chmod g+s|g+ws /share/devrepo.git  # set file attrib inheritance
cd /share/devrepo.git
git init --bare --shared=group  # explicitly set repo to shared status - multiple user contributes
