# Linux+ XKO-004 - Lynda

# User Account management
/dev/null  # bottomless pit
/dev/random  # random char generator
/etc/group  # groups w/ users
/etc/passwd  # user accounts, group number, home dirs, bash location
/etc/securetty  # tty connections (comment out to disable)
/etc/shadow  # user password, aging info ('!!' password not set)
/root/anaconda-ks.cfg  # RHEL kick-start file created after install

localectl  # print language and keyboard key map
localectl list-locales | grep ^en  # list languages, English interpreted regions
localectl set-locale LANG=en_US.utf8  # set language to US English
localectl list-keymaps | grep ^us  # list keyboard key maps, English interpreted regions
localectl set-kemap us  # set keyboard key map to 'us'
date --utc  # print universal time [Zulu]
date +"%s"  # print seconds since Jan 1, 1970
date --date='@<seconds>'  # print date from input seconds
date --date='@1481192709'
date --date '+10 days'  # print date '10' days from current
date --date 'next thursday'
cal  # print calendar for current month
cal -3  # print calendar three months from current
cal 1752  # print calendar for year 1752 (switched from Julian => Gregorian)

updatedb  # update locate command database
locate -S  # print locate command stats
locate bzip2
locate -c bzip2  # print locate count result only
locate -A bzip man  # print locate keyword multiple file names
locate --regexp '^/usr.*pixmaps.*jpg$'  # basic regex print matches start w/ 'usr', end with 'jpg'
locate --regex '^/usr.*(pixmaps|backgrounds).*jpg'  # extended regex print matches start w/ 'usr', end with 'jpg', 'pixmaps OR 'backgrounds'

find path/to/file PARM KEY
e.g.>
find /etc &> /dev/null  # redirect all output to 'bottomless pit' (e.g. hide command output)
find / -name *bzip2*  # print file w/ 'bzip2' name inclusive
find / -user grant  # print files for use
find / -group grant  # print files for group
find / -size +50k  # print files > 50k
find / -size +1M -exec stat -c "%s %n" {} \; | sort -n  # print files > 1M, stats => size, name; sort numeric small to large
find / -mtime -1  # print files modified < one day
find / -mtime +1  # print files modified > one day
find /home -type f  # print only files
find /home -type d  # print only directories

grep OPTION KEY  # global reg expression
e.g.>
grep -v '^$' test.txt  # print only non-blank lines (^-begin, $-end)
grep -i 'root' /etc/passwd  # print textkey, case [i]nsensitive

find / -name *.txt | grep apache  # search location for text files, grep textkey (pipe find results to grep)
grep 'user[0-9]' file.txt  # print matches for 'user0..user9'
grep 'user[[:digit:]]' file.txt  # print matches for 'user0..user9' (e.g. character class enumeration)
grep 'user[[:digit:][:space:]]' file.txt  # print matches for 'user0..user9' or 'user_' (trailing space)
grep 'user[![:digit:]]' file.txt  # print (negate) matches for everything but 'user0..user9'
grep '^http.*tcp.*service$' /etc/services  # basic regex print matches begin w/ 'http', end w/ 'service'
egrep '^http.*(tcp|udp).*service$' /etc/services  # extended regex print matches start w/ 'http', group 'tcp or udp', end w/ 'service'

psswd $USER  # set user password
psswd --expire $USER  # expire user password

chage -l | --list $USER  # list user account aging info, no sudo
chage --list grant
chage -d | --lastday DAY  # set days since pd was last changed
chage -d 0 $USER  # set days=0 forces user pd change at next login
chage --lastday 2017-10-25
chage -m | --mindays DAY  # minimum days before pd can be changed
chage --mindays 0  # user can change pd at anytime, no time restriction
chage -M | --maxdays DAY  # set max days user pd is valid
chage --maxdays 99999
chage -W | --warndays DAY  # set days to warn user before pd change is required
chage --warndays 7
chage -E | --expiredate DATE  # set days to account expire
chage --expiredate 2017-10-25
chage -I | --inactive DAY  # set days inactive after pd expire for account lockdown
chage --inactive 7
chage -I -1 -m 0 -M 99999 -E -1 $USER  # disable all pd aging; I=-1 set pd inactive never, E=-1 set account expire never

useradd $USER  # add user account
userdel $USER  # delete user, keep home dir + files
userdel -r $USER  # delete user + home dir + files
usermod -d DIR  # define user home dir
usermod -aG GRP $USER  # append user to groups, a=append, G=group
usermod -l NAME $USER  # change user login name
usermod -L $USER # lock user account password ('!' prefix passwd, denotes locked account) - does not lock working SSH keys
usermod -U $USER # unlock user account
usermod -s <shell> $USER  # specify default login shell
usermod -s /sbin/nologin $USER  # change user shell to nologin, completely block user login attempt
usermod -s /bin/bash $USER  # reinstate user login shell session to bash

chown OPTION $USER:GRP FILE  # file ownership cmd
e.g.>
chown bob file.txt  # change file owner
chown :bobgroup file.txt  # change file group
chown bob:bobgroup file.txt  # change file owner and group
chown -R bob:bobgroup /home/bob  # change file owner and group recursively
useradd testuser  # create user
useradd -G accounting bob  # create user 'bob' add to group 'accounting'
groupadd testgroup  # create group
chmod [options] <permissions> FILE  # file mod cmd
chmod 750 file.txt
chmod u=rwx,g=rx,o= file.txt
chmod u+rwx file.txt  # add 'rwx' perm to 'user'
chmod o-x file.txt  # subtract 'x' perm from 'other'
chmod ugo-x file.txt  # subtract 'x' perm from 'user, group, other'
chmod a-x file.txt  # subtract 'x' perm from 'user, group, other'
chmod -R a-x /home/bob  # subtract 'x' perm recursively from /home/bob
umask  # print default file perms
umask -S  # print default file perms, symbolic notation
~> umask - 777 = default directory perms
~> umask - 666 = default file perms
umask <numeric>   # change umask temporarily
umask 022
~> vim ~/.bashrc ~> umask 0022  # change umask user value persist
~> vim /etc/profile.d/umask.sh  # change umask system wide value persist
~> if [ "$UID" -ge 1000 ] ;then
	umask 022
~~>fi
chmod 4755 /usr/bin/su  # set SUID (super user) bit execute perms [file]
chmod u+s /usr/bin/su
chmod 2755 /usr/bin/screen  # set SGID (super group) bit group owner perms [directory]
chmod g+s /usr/bin/screen
find / -perm -4000  # print files with SUID bit set
find / -perm -2000  # print file with SGID bit set
chmod 1777 stickydir/  # set sticky bit [directory], user cannot delete or move non-owned files

chattr +i file.txt  # set file to [i]mmutable
chattr +a file.txt  # set file to [a]ppend only 
lsattr file.txt  # print file attrib

getfacl -t aclfile.txt  # print file acl attribs, [t]abular format
getfacl -R -t /home > home-perms.txt
setfacl -m user:$USER:PERM FILE  # set file acl cmd, user
e.g.> setfacl -m user:root:rwx aclfile.txt  # set file acl attribs
setfacl -m group:GRP:PERM FILE  # set file acl cmd, group
e.g.> 
setfacl -m group:accounting:rx aclfile.txt
setfacl -m user:bob:rwx,group:accounting:rx aclfile.txt  # set both user and group acl
setfacl -m u:bob:rwx,g:accounting:rx aclfile.txt
setfacl -R -m user:bob:rwx /home/bob  # set file acl recursively
setfacl -d -m user:bob:rwx dir1  # set default acl on dir
setfacl -x user:root acldeldir  # delete specific acl for user 'root'
setfacl -x root acldeldir/  # delete acls for user 'root'
setfacl -x group:root acldeldir/  # delete acls for group 'root'
setfacl -x default:user:root acldeldir  # delete default acl
setfacl -k acldeldir/  # delete all default acls for acldeldir
setfacl -b acldeldir  # delete all acls for acldeldir
setfacl -R -b acldeldir/  # delete all acls recursively for acldeldir

tar --xattrs -cvpf etc.tar /etc  # archive w/ metadata; [c]reate, [v]erbose, maintain [p]ermissions, [f]ile
tar --xattrs --gzip -cvpf etc.tar.gz /etc  # archive and compress w/ gzip
tar --xattrs --bzip2 -cvpf etc.tar.bz2 /etc  # archive and compress w/ bzip2
tar --xattrs --xz -cvpf etc.tar.xz /etc  # archive and compress w/ xz
tar --xattrs -xvpf etc.tar  # e[x]tract archive, [v]erbose, maintain [p]ermissions, [f]ile
tar --xattrs -xvpf etc.tar -C /home/user1/Downloads  # e[x]tract archive, [v]erbose, maintain [p]ermissions, [f]ile, -C=dest directory
tar -tf etc.tar  # list files archive
tar -tf etc.tar | grep firewall
tar --gzip -tf etc.tar.gz  # list files archive compression

gzip FILE  # compress FILE, no archive - delete FILE!
gunzip ZIP.gz  # decompress ZIP, no archive - delete ZIP!
bzip2 FILE  # compress
bunzip2 ZIP.bz2  # decompress
xz FILE
unxz ZIP.xz
zip ZIP.zip FILE  # compress FILE, no delete FILE
unzip ZIP.zip

# SSH key management (HOST1_local -> HOST2_remote)
HOST1> ssh-keygen  # create rsa pvt|public key pair
HOST1> ls -l ~/.ssh  # list .ssh hidden dir (pvt|public key files)
HOST1> cat ~/.ssh/id_rsa.pub  # print rsa public key contents
HOST1> ssh-add  # add key set to local ssh agent for management (optional)
HOST1> ssh-copy-id user1@HOST2-ip-addr  # copy local public key to remote 
~> local public key stored in remote dir ~/.ssh/authorized_keys
~> remote fingerprint stored in local dir ~/.ssh/known_hosts

# SSH tunnel port forwarding
cat /etc/passwd | ssh HOST2 "cat - >"  # pipe data via ssh tunnel, no port forward
client> ssh -L <client-port>:<remote>:<remote-port> <client>  # port forward to remote host from client
HOST1> ssh -L 3306:127.0.0.1:3306 user1@HOST2.localnet.com
HOST1> ssh -L 3306:ubhost1.localnet.com:3306 user1@HOST2.localnet.com
HOST1> ssh -L 3306:127.0.0.1:3306 -L 5901:127.0.0.1:5901 user1@HOST2.localnet.com  # forward multiple ports

client> ssh -R <remote-port>:<client>:<client-port> <remote>  # reverse port from remote to client
HOST1 => ubhost1 => HOST2  # create indirect connection from HOST to HOST2, circumvent firewall
HOST2> ssh -R 10000:127.0.0.1:22 user1@ubhost1.localnet.com  # reverse port from ubhost1:10000 to HOST2:22
HOST1> ssh -p 10000 user1@ubhost1.localnet.com  # forward port from HOST1:22 to ubhost1:10000

# File System, Paths
yum install -y tree  # visual file structure diagram
file path/to/file  # print file type information
cd ~  # go to home dir
cd -  # go to previous dir
mkdir -p ~/parent/child  # create parent + child directory
mkdir ~/{dir1,dir2,dir3}  # create multiple directories
ls -d ~/dir?  # list directory metadata, glob last digit
touch file{a,b,c,d}.txt  # create multiple files
~> file[cd].txt  # file glob pattern match: filec.txt -> filed.txt
~> file{c,d}.txt  # file glob pattern match: only filec.txt, filed.txt
~> file?.txt  # file glob pattern match: any fileX.txt
ln file.txt filelink.txt  # create hard link
ln -s file.txt filesymlink.txt  # create soft link
stat file.txt  # print status info for file

term1> mkfifo named_pipe  # create named pipe
term1> echo "test" > named_pipe  # use named pipe to send output to second terminal
term2> cat named_pipe

ls > /home/lsout.txt  # redirect stdout to file, overwrite
ls >> /home/lsout.txt  # redirect stdout to file, append
ls 2> /home/lsout.err  # redirect stderr to file, overwrite
ls 2>> /home/lsout.err  # redirect stderr to file, append
ls &> /home/lsout.err  # redirect all output to file, overwrite (no output to terminal)
ls &>> /home/lsout.err  # redirect all output to file, append (no output to terminal)
ls | tee -a lsout.txt  # output to file and terminal, append
sort < /home/lsout.txt > /home/sorted.txt  # sort input file 'lsout.txt', redirect to output file 'sorted.txt'

# File System management
ls -li  # print file list w/ inode numbers
find . -inum INODE -exec rm -i {} \;  # remove file by inode number
mkfs -t ext4 DEV  # format device w/ ext4 file system
e.g.> mkfs -t ext4 /dev/vgdata/lvdata
ls /sbin/mk*  # list all files start with 'mk' (make file sys)
tune2fs -j DEV  # add journal mechanism to legacy file system (e.g. ext2), no data loss
e.g.> tune2fs -j /dev/vgdata/lvdata

resize2fs DEV  # resize ext4 file system type
resize2fs /dev/vgdata/lvdata, resize2fs /dev/vgdata/lvdata 500M
e2fsck -ff DEV  # file system quick check - 5 categories
fsck -n DEV  # file system check, -n=do not fix results, un-mount first
fsck -A  # check all files
fsck -y  # mark 'yes' to all file system repairs

sosreport  # create report of file system; stored in /var/tmp/; creates bkup of sys config
yum install -y dump
dump -0uf /home/lvraid.dump /dev/vgraid/lvraid  # create dump of sosreport
restore -rf /home/lvraid.dump  # restore dump config to curr dir

mkfs -t xfs -f DEV  # format device, create xfs file system
xfs_repair DEV  # repair XFS fs
xfs_admin DEV  # change fs parameters, create label
xfsdump DEV  # incremental fs dump capability
xfs_freeze DEV  # suspend access to fs
xfs_quota DEV  # manage fs quotas
xfs_growfs DEV  # resize XFS fs larger

# LVM device monitoring
mount DEV MOUNT  # mount device
mount -t ext4 /dev/vgdata/lvdata /media/lvdata  # use ext4 driver to mount ext2|3 legacy device
umount MOUNT
blkid  # list block id; device name, UUID, LABEL, TYPE, PTTYPE
lsblk  # list block partition; NAME, MAJ:MIN, SIZE, RO, TYPE, MOUNTPOINT
lsblk -f  # list block partition w/ fstype; NAME, FSTYPE, LABEL, UUID, MOUNTPOINT
df -h  # list disk free usage, [h]uman readable: Size, Used, Avail, Use%, Mounted on
df -T  # list disk free usage w/ fstype; Filesystem, Type, 1K-blocks, Used, Available, Use%, Mounted on
pvs  # physical volume summary; PV, VG, Fmt, Attr, PSize, PFree
vgs  # volume group summary; VG, #PV, #LV, #SN, Attr, VSize, VFree
lvs  # logical volume summary; LV, VG, Attr, LSize, Pool, Origin, Data%, Meta%, Move, Log, Cpy%Sync, Convert

# LVM device management
pvcreate DEV  # create physical volume, empty, un-mount first, warning for data destroy
pvmove DEV1 DEV2  # move data to another separate pv
e.g.> pvmove /dev/sdc1 /dev/sdd1
vgcreate VOL-GRP <physical-volume(s)>  # create volume group
vgreduce VOL-GRP DEV  # remove device from volume group
vgreduce vgdata /dev/sdc1
lvcreate --name VOL-NAME --size SIZE VOL-GRP  # create logical volume
lvcreate --name lvdata --size 500M vgdata
vgchange -ay  # activate lvm path after creation, if necessary

vgremove VOL-GRP  # remove volume group, verify w/ lsblk
vgremove vgraid
pvremove DEV  # remove physical volume data from device
e.g.> pvremove /dev/sdb1

vgextend VOL-GRP DEV  # extend volume group, no warning for data destroy
vgextend vgdata /dev/sdd1
lvresize -l CAP DEV  # extend logical volume to CAP
e.g.>
lvresize -l 100%FREE /dev/vgdata/lvdata  # extend logical volume to 100% free space
lvresize -l -r 100%VG /dev/vgdata/lvadata  # extend logical volume to 100% of volume group, [r]ecursively resize file system
lvresize -L -r CAP DEV  # shrink logical volume, [r]ecursively resize file system
e.g.> lvresize -L 400M /ev/vgdata/lvdata

# RAID create using LVM
vgcreate vgraid DEV  # create RAID using LVM, verify w/ pvs cmd
e.g.> vgcreate vgraid /dev/sdb1 /dev/sdc1 /dev/sdd1  # n-1 * min disk capacity = total RAID 5 capacity e.g. 3 disks => 3-1 * 472MB = 944 MB
lvcreate --type TYPE -i DEV-NUM -l CAP -n VOL VOL-GRP  # create logical RAID volume
e.g.> lvcreate --type raid5 -i 2 -l 100%VG -n lvraid vgraid  # -i=total drives-1 (RAID 5), -l=capacity, -n=logical vol name; verify w/ lvs
mkfs -t ext4 /dev/vgraid/lvraid  # create file system on RAID partition

# RAID create using mdadm
gdisk DEV  # disk partition tool; empty, un-mount, unlimited GPT partitions, < 18 exabytes (EB) ~ 1 million TB = 1 EB
> n - new partition
> Partition number = (default)
> First sector = (default)
> Last sector = +500M  # (default - entire disk) define size
> Hex code or GUID = (default or e.g. 'fd00' - RAID partition)
OR
> t - change partition type code (e.g. 'fd00' - RAID partition)  # skip new partition parameters
> p - print partition
> w - write to disk
mdadm --create PART DEV LVL DEV-RAID BIT-MAP
e.g.> mdadm --create /dev/md/mdraid /dev/sdb1 /dev/sdc1 /dev/sdd1 /dev/sde1 --level=5 --raid-devices=4 --bitmap=internal
> Continue creating array? y
cat /proc/mdstat  # print RAID personality types for installed devices
mdadm --detail -scan  # print RAID array device, metadata, name, UUID
systemctl enable mdmonitor  # enable mdmonitor on boot
systemctl start mdmonitor  # start mdmonitor as currently running service

# RAID mdadm management
mdadm --query PART  # summary info
mdadm --detail PART  # detail info
mdadm --fail DEV  # mark device as faulty
mdadm --remove DEV  # remove device from array
mdadm --add DEV  # add device to array
mdadm --stop PART  # stop RAID
mdadm --remove PART  # remove RAID after stopped
mdadm --zero-superblock DEV  # remove RAID metadata on device
man mdadm  # manual for mdadm tool

# RPM package management
rpm -qa | sort  # [q]uery db [a]ll installed packages sort alpha
rpm -qa --last  # query db installed packages sort by date, top recent
rpm -qa Group="System Environment/Shells"  # print packages tagged w/ "System Environment/Shells"
rpm -qi bash  # query db [i]nformation for program
rpm -qf /bin/bash  # query db [f]ile information
rpm -ql yum  # query install rpm [l]ocation
rpm -qd yum  # query install package [d]ocumentation
rpm -qc yum  # query install [c]onfiguration files
rpm -q --provides bash  # query file package feature provides
rpm -q --requires bash  # query file package requirements
rpm -q --changelog bash  # query file changelog
rpm -qip PKG  # [q]uery rpm [p]ackage [i]nformation (name, version, release, architecture, install date(none), grp, size, etc.)
rpm -qlp PKG  # print [p]ackage [f]ile [l]isting and install location

#  Source software install
yum group install -y "Development tools"  # install software from group "Development tools"
wget URL  # dl tar file
tar -xzvpf TAR  # extract tar archive, x=extract, z=gzip, v=verbose, p=permissions, f=file
make configure  # make tool created config script
./configure --prefix=/usr/local  # run config script w/ arg for binary file location
make install  # compile source, install software
PKG --version  # check installed software version

# YUM package management
yum info PKG  # print package information
yum install -y yum-utils
yum install -y yum-plugin-downloadonly  # install yum dl only plugin
yum install --downloadonly --downloaddir=/tmp/packages http  # dl http packages to /tmp/packages
yum localinstall PKG  # local package install from current directory
yum reinstall --skip-broken PKG  # dl new package from repository, install override current package; skip broken dependencies
yum list updates  # list package updates available [installed, base, updates]
yum upgrade PKG  # update current package only, do not remove obsolete packages
yum remove PKG  # remove package specified, dependencies and config files NOT removed
yum autoremove PKG  # remove package AND dependencies
package-cleanup --leaves  # list packages not currently used (does not delete)

# YUM Group package management
yum group list ids  # list group packages by category w/ ids (inside parentheses)
yum group install "Security Tools"  # install group packages by name
yum group install group-tools  # install group packages by id, from Available Groups
yum group remove security-tools  # remove group packages (all previously installed packages may not be removed)
yum autoremove @security-tools  # remove all group packages and dependencies using package tools '@' symbol
yum group update GRP-ID  # update all group packages by id
yum group info GRP-ID  # list group info, optional group packages not installed by default
vim /etc/yum.conf  # yum config file, set group package optional installs
yum group install GRP-ID --setopt=group_package_types=mandatory,default,optional  # execute group package optional installs

# YUM Repo management
cd /etc/yum.repos.d/  # explore yum repository files
vim CentOS-Base.repo  # stores repository credentials
> [base]
> name=CentOS-$releasever - Base
> mirrorlist=http://mirrolist.centos.org/?release=$releasever&arch=$basearch&repo=os&infra=$infra
> #baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch  # uncomment if no mirror, static line ref to repo
> gpgcheck=1  # GPG signature check boolean; ON=1, OFF=0
> gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7

> [centosplus]
> name=CentOS-$releasever - Plus
> mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=centosplus&infra=$infra
> #baseurl=http://mirror.centos.org/centos/$releasever/centosplus/$basearch/
> gpgcheck=1
> enabled=0  # disable repository
> gpgkey=file:///etc/pki/rmp-gpg/RPM-GPG-KEY-CentOS-7

yum repolist  # list enabled repositories: repo id, repo name, status [packages]
yum repolist enabled|disabled  # list repos based on criteria
yum repoinfo  # list repository info (id, name, revision, updated, pkgs, size, mirrors, baseurl, expire, Filter, filename)
yum --disablerepo="*" --enablerepo="centosplus" list available  # disable all repos, enable centosplus repo, get list of all available packages
yum --disablerepo="*" --enablerepo="centosplus" install golang  # install golang packages from disabled repo (without edits to yum.conf)

# dpkg = Debian Package Manager, apt = advanced package tool, ppa = Personal Package Archive
dpkg --info PKG  # print package info (local only)
dpkg -c PKG   # print install files
dpkg -L APP-NAME  # print install files via db (previously installed packages only)
dpkg -i PKG  # install package
dpkg -S FILE  # print which package file belongs
dpkg -r PKG  # remove package

apt search PKG  # prints all packages (installed, uninstalled)
apt list PKG-PARM  # list packages based on criteria
apt list --installed PKG  # list packages install
apt update  # update indexes of available software
apt list --upgradable  # list packages that have newer versions available
apt print PKG  # print package details: version, priority, origin, maintainer, Original-Maintainer, bugs, etc.
apt info PKG  # print package details
apt-get download PKG  # dl package

apt install PKG  # install package
apt upgrade PKG  # upgrade package (install newest version)
apt remove PKG  # remove package, excluding dependencies
apt autoremove  # remove all packages no longer needed, including dependencies
apt purge PKG  # remove package w/ config files
apt full-upgrade  # upgrade entire distro (not singular packages)

apt policy  # list repository config locations
grep '^deb' /etc/apt/sources.list /etc/apt/sources.list.d/*  # list 'deb' repository config locations
add-apt-repository 'deb http://archive.canonical.com/ubuntu/ disco partner'  # add ubuntu repo
add-apt-repository --remove 'deb http://archive.canonical.com/ubuntu/ disco partner'  # remove ubuntu repo
add-apt-repository ppa:libreoffice/ppa  # add libre office repo
add-apt-repository --remove ppa:libreoffice/ppa  # remove libre office repo

# Systemd management
systemctl list-unit-files -at service  # list all service unit files
systemctl list-units -at service  # list all enabled running | non-running services
systemctl list-units -t service --state running  # list only running services
systemctl list-unit-files -at service  # list persistent services at boot
systemctl status rsyslog  # print status of rsyslog service
systemctl cat rsyslog  # list contents of rsyslog service unit file
systemctl status SRVC  # print service status: Loaded, Active, Main PID, Group
systemctl start SRVC  # start service
systemctl stop SRVC  # stop service
systemctl restart SRVC  # stop then start service
systemctl is-active SRVC  # print service 'active' message only
systemctl mask SRVC  # restrict service from running (manual or automatic)
systemctl unmask SRVC  # unrestrict service from running (manual or automatic)
systemctl is-enabled SRVC  # print service 'enabled' message only
systemctl enable SRVC  # persist service at boot
systemctl disable SRVC  # no persist service at boot

# SysV legacy management
chkconfig --list  # list all services w/ run levels
chkconfig --add SRVC  # add symbolic link
chkconfig --del SRVC  # delete symbolic link
chkconfig --level 345 http on  # create links to start http service on run levels 3, 4, 5
service SRVC start  # start service
service SRVC stop  # stop service
service SRVC restart  # stop then start service
service SRVC reload  # reload service config file without stop, start
service SRVC stauts  # print service status
service --status-all  # print all service status
/etc/init.d/httpd start  # start service without 'service' keyword
init RUN-LVL  # set run level: 0=shutdown, 1=single-usr, 2=multi-usr, 3=multi-usr+network, 4=undefined, 5=multi-usr+network+gui, 6=reboot

# AT Service
yum install -y at  # install service
systemctl start atd  # start service
systemctl enable atd  # persist service at boot
at now +5min  # create one-time at job
> mkdir ~/Documents.bak
> rsync -a ~/Documents/ ~/Documents.bak  # use rsync to back up Documents dir
> <ctrl+d>  # save changes
atq  # print 'at' jobs w/ number
at -c JOB  # print shell env + 'at' job contents
atrm JOB  # remove, cancel 'at' job

batch  # create batch job, run when sys load avg < 0.8 (not busy!)
> touch ~/batchfile.txt
> <ctrl+d>  # save changes
atq  # print batch jobs w/ number

# CRON Service
/etc/cron.d  # sys cron job dir
/etc/cron.d/backupdocs  # create sys crontab (enter default editor)
/var/log/audit/audit.log  # SELinux log file (enforcing, permissive), audit.d running
/var/log/messages  # SELinux log file, audit.d not running
/var/spool/cron/%USER  # user cron job dir

yum install -y cronie crontabs  # install cron service
systemctl start crond  # start service
systemctl enable crond  # persist service at boot
ls -d /etc/cron.*  # print periodic dirs (hourly, daily, weekly, monthly)
ref: crontab.guru, crontab-generator.org
format: minute hour day-of-month month day-of-week <command>

crontab -e  # create user crontab (enter default editor)
> 0 1 * * * rsync -a ~/Documents/ ~/Documents.bak  # create cron job, save, exit
crontab -l  # list curr cron jobs

> 0 1 * * * root rsync -a /home/grant/Documents/ /home/grant/Documents.bak  # create cron job, save, exit
> 45 23 * * 6 grant rsync -a touch /home/example.txt  # create cron job, save, exit

# SELinux management
id -Z  # print SELinux user context
ps -eZ  # print running process [e]verything, Z=security
ls -lZ  # print files, [l]ong, Z=security
ls -lZ /usr/bin/passwd  # print password file security context
ls -lZ /etc/shadow  # print shadow file security context
chcon -t <context-type> FILE  # change file security context, temporarily
chcon -t etc_t ~/file.txt
restorecon FILE  # change file security context to default (based on SELinux policy)
touch /.autorelabel  # change all files security context to default after reboot
semanage fcontext -a -t <context-type> FILE  # change file security context policy, [a]dd, [t]ype
semanage fcontext -a -t etc_t /home/user1/file.txt
semanage fcontext -l | grep FILE  # print file security context policy, [l]ist
semanage fcontext -l | grep file.txt
semanage boolean -l  # list SELinux boolean status w/ description
semanage boolean -l | egrep 'SELinux|mozilla_plugin_use_gps'  # print boolean status for header and boolean value
sestatus -b  # list SELinux boolean status
getsebool -a  # list SELinux boolean status, [a]ll
getsebool mozilla_plugin_use_gps
setsebool <boolean-name> <value>  # set boolean switch, temporarily
setsebool mozilla_plugin_use_gps on
setsebool -P <boolean-name> <value>  # set boolean switch, persist on reboot, [P]olicy

sealert  # start SELinux alert browser application
ausearch -m avc  # print all 'avc' error messages ([a]cess [v]ector [c]ache - SELinux RAM based cache), [m]essage
ausearch -m avc -ts today
ausearch -m avc -ts recent  # last ten minutes
aureport  # summary reports of audit log activity 

# AppArmor management (modes: complaining, enforcing) [SUSE, Debian, Ubuntu]
/etc/pam.d  # PAM - pluggable authentication module service files dir
/etc/security/pwquality.conf  # default pwd policy file

apt install apparmor-profiles apparmor-profiles-extra  # install apparmor profiles
aa-status  # print apparmor status
aa-enforce /etc/apparmor.d/usr/sbin/cupsd  # change apparmor profile mode enforce
aa-complain /etc/apparmor.d/usr/sbin/cupsd  # change apparmor profile mode complain
apparmor_parser -R /etc/apparmor.d/usr/sbin/cupsd  # disable profile, [R]ecursive

# TCP Wrappers
/etc/hosts.allow
/etc/hosts.deny

SRVC:CLIENT: [:OPTION]  # comma separated services, clients=hosts|ip
~> wildcards => ALL-match everything, LOCAL-FQDN w/o dot, KNOWN-dns hostname, UNKNOWN, PARANOID-drops if fw|bkwd dns no match
~> ALL: ALL
~> sshd: 192.168.1.  # match service on network
~> ALL: 192.168.1.100  # match all services on host
~> sshd, vsftpd: 19.168.1.100,LOCAL  # match services on host + local hosts

grep tcp /etc/services|less  # list tcp services, un-named pipe to 'less'
grep tcp /etc/services|awk '{print $1}' | sort | less  # list tcp services, print 1st column only, sort

# IP Tables
iptables -A INPUT -p -tcp --dport 80 -j ACCEPT  # create iptable rule, input chain, accept tcp traffic port 80
iptables -A INPUT -p -tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -N INTERNAL  # create custom iptable chain
iptables -A INPUT -i eth01 -j INTERNAL

# Firewalld
man firewalld.zones  # print firewall zone info
firewall-cmd --state  # print firewalld status
firewall-cmd --get-services  # list services to configure by name
firewall-cmd --timeout=60  # set reset timer, revert rules after timer expires (remote management)
firewall-cmd --zone=public --permanent --add-service=ssh
firewall-cmd --permanent --remove-service=http
firewall-cmd --permanent --add-port=443/tcp
firewall-cmd --permanent --add-port=5901-5910/tcp
firewall-cmd --reload  # reload firewall to enable configurations
firewall-cmd --list-services  # list services enabled in curr zone
firewall-cmd --list-ports  # list ports enabled in curr zone
firewall-cmd --get-default-zone
firewall-cmd --list-all-zones
firewall-cmd --permanent --new-zone=coffeeshop  # create new zone
firewall-cmd --set-default-zone=coffeeshop
firewall-cmd --permanent --add-source=10.10.10.0/24  # add source ip to zone
firewall-cmd --list-all --zone=coffeeshop  # print status info for zone

# NAT (uses firewalld - masquerading, forwarding, rich rules)
firewall-cmd --permanent --query-masquerade  # print masquerade status
firewall-cmd --permanent --zone=coffeeshop --add-masquerade  # add traffic to zone is masqueraded
firewall-cmd --permanent --zone=coffeeshop --add-rich-rule='rule family=ipv4 source address=192.168.100.0/24 masquerade'
firewall-cmd --permanent --zone=coffeeshop --add-rich-rule='rule family=ipv4 source address=192.168.1.0/24 forward-port port=22 protocol=tcp to-port=2222 to-addr=192.168.100.101'  # forward port 22 to inside host
firewall-cmd --permanent --zone=coffeeshop --add-forward-port=port=22:proto=tcp:toport2222:toaddr=192.168.100.101  # forward port 22 to inside host 2222

# Fail2Ban - firewall rules for banning (iptables, firewalld)
/etc/fail2ban/jail.local

yum install -y epel-release  # add EPEL repo
yum install -y fail2ban fail2ban-systemd  # install fail2ban
cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local  # copy create local config
~> backend = systemd  # log fail2ban using systemd
~> [sshd]
~~> enabled = true  # turn on jailing for sshd
systemctl start firewalld  # turn on firewall for curr session
systemctl enable firewalld  # persist on boot
systemctl start fail2ban
systemctl enable fail2ban
systemctl fail2ban-client status

# Logging (rsyslog, journald)
/etc/cron.daily/logrotate  # cron job log rotator
/etc/logrotate.conf  # log rotator config file
/etc/logrotate.d  # logrotate services dir
/etc/rsyslog.conf  # rsyslog config file
/var/log/messages  # rsyslog file
/var/log/journal  # journald file
/var/run  # journald log, no-persist

systemctl start rsyslog
systemctl enable rsyslog
grep -v 'systemd:' /var/log/messages  # invert grep search rsyslog
tail -f /var/log/messages  # follow rsyslog
logger "MSG"  # write to rsyslog
journalctl -k # print log, [k]ernel only
journalctl /sbin/crond  # list log entries for service
journalctl -u crond # list log entries for [u]nit name
journalctl -f  # [f]ollow binary log
mkdir -p /var/log/journal  # create dir for persistence
systemctl restart systemd-journald  # restart service to affect persistence
journalctl -b -1  # print system boot events
journalctl --since "2015-01-10 17:15:00"
journalctl --since "2015-01-10 17:15:00" --until "2015-01-11 03:00"
journalctl --since yesterday
journalctl --since "09:00: --until "1 hour ago"

cron.* /var/log/cron.log  # synced static path, write to file sys at every entry
cron.* -/var/log/cron.log  # non-synced static path, write to file sys periodically
cron* ?dynamiccronlog  # create dynamic path, using template

# Network troubleshooting
## routing
 route
 netstat -r
 ip route
## packet hops
 nmap
 traceroute
 tracepath
 mtr
## local switching
 arp
## network saturation
 iftop
 ipperf
## packet drops, timeouts
 ping
 tcpdump
 Wireshark
 netcat
## name resolution
 nslookup
 dig
 host
 whois
## network adapters
 ethtool
 nmcli
 ip
 ifconfig

# CPU monitoring and config
 /proc/cpuinfp

 uptime
 loadaverage
 sar  # collects and displays all sys activities
 sadf  # generates report in csv, xml, etc. format
 iostat  # generates cpu and io stats
 mpstat  # print cpu stats
 pidstat  # reports stats on process id
 Ksar  # java tool to visualize sar reports
 sysctl  # kernel tuning tool
 tuned  # kernel tuning service
## memory troubleshooting
 vmstat  # print processes, memory, paging, block IO, traps, disks, cpu activity
 free  # print free memory
 cat /proc/meminfo  # memory stats
## process priority management
 nice  # set initial process nice lvl
 renice  # change process nice level
 top  # monitor, change process nice lvl
 kill  # kill by pid
 killall  # kill by name
 pkill  # kill by pattern
 ps  # process list
 lsof  # list files open by running process
 pgrep  # search process
 strace PROC 2>&1 | grep KEY  # watch prog run, search, outputs to stdout & stderr
## hardware troubleshooting
 lshw  # list all hardware
 dmidecode  # list low level hd from bios view
## dns troubleshooting
 /etc/nsswitch.conf
 /etc/hosts
 /etc/resolv.conf  # global dns servers
 /etc/sysconfig/network-scripts/ifcfg-eth0
 dig @192.168.1.254 ford.com

# Git Version Control
/etc/gitconfig  # global system config
$HOME/.gitconfig  # local user config
/path/to/project/.git/config  # local project config

new FILE => git add -> stage FILE => git commit -> save local repo => git push -> save remote
grant@soundlinuxtraining.com  # Grant McWilliams email
yum install -y git

git config --system|--global|--local  # set config for system | user | project level
git config --global user.name "Grant McWilliams"  # set Git user name
git config --global user.email "somebody@idunno.com"  # set Git email
git config --global core.editor "vim"  # set Git editor (OS specific)
git config --global color.ui true  # turn on colors
git config --list  # list configs
git init  # initialize git repo
git status
git add newfile.txt  # track file
git commit -m "initial commit"  # save changes
git commit -e  # commit all changes, open [e]ditor (multi-line comments)
git commit -am "second commit"  # add all changes and commit w/ message
git branch  # print branches, '*' denotes curr branch
git branch testconfig  # create branch
git checkout BRCH  # switch to branch
git diff BRCH1..BRCH2  # diff branches
e.g.> git diff master..development
master> git merge development  # fast forward merge of development in to master branch
git log |--graph --oneline  # print commit changes curr branch
git remote add origin https://github.com/GrantMcW/GitProjectOne.git  # add remote 'origin' + url to curr git project
git push -u origin master  # push files on master branch to remote 'origin'
git push  # push changes to remote for tracking branches
git fetch  # pull files from remote, no merge
git merge  # manual merge of pulled local files
git pull = fetch + merge

# Automation, Scripting
#!/bin/bash  # specify absolute path to bash interpreter executable
#!/usr/bin/env bash  # use 'env' to search system path for bash interpreter

~> file globbing != regex; globs match file names, regex match text
mkdir -p ~/bin  # dir in system path to insert scripts, RHEL 7+ (run as cmds)
bash SCRIPT  # execute script as bash arg, no set permissions
~> echo '$0 is' "$0"  # single quote - literal, double quote - interpreted preserve spaces, $0 - executable path
~> $1 - 1st arg, $2 - 2nd arg, $@ - all args (word split items), $* - all args (one entity)

## script preamble
#!/bin/bash
# script-output.sh
echo "This part of the script worked"  	# send to stdout
echo "Error: this part failed" >&2  	# send to stderr
~> $ script_output.sh > stdout.txt 2> stderr.txt  # execute script, send output to both stdout and stderr

#!/bin/bash
# readpipe.sh
if [[ -p /dev/stdin ]] ;then  		# check if stdin is a pipe
	while IFS= read -r LINE; do	# while loop, IFS=internal field separator to line split, [r]ead in to 'LINE' until no data
		echo "Line: $LINE"	# stdout
		pipearray+=( "$LINE" )	# input 'LINE' in to indexed array 'pipearray'
	done
fi
echo "Pipe: ${pipearray[@]}"		# stdout 'pipearray' contents
~> $ cat /etc/passwd | ./readpipe.sh

## conditionals, case
case $AGE in  # wildcards, char sets, char classes, no regex
	[1-9]) echo "You are quite young"	;;
	[5-9]) echo "Time for elementary school";;
	1[0-9]) echo "Time for middle school"	;;
	[2-9][0-9]) echo "You are an adult"	;;
	*) echo "That doesn't seem to be an age"
esac

if [[ -z $VAR ]]  # check zero length

if [[ -n $VAR ]]  # check non-zero length

-e  # if file exists
-f  # if file exists and is a file
-d  # if file exists and is a dir
-c  # if file exists and is a char device
-b  # if file exists and is a blk device
-p  # if file exists and is a pipe
-S  # if file exists and is a socket
-L  # if file exists and is a symbolic link
-g  # if file exists and has the SGID bit set
-u  # if file exists and has the SUID bit set
-r  # if file exists and is readable by curr user
-w  # if file exists and is writable by curr user
-x  # if file exists and is executable by curr user
-s  # if file exists and has a size larger than 0 bytes
-nt  # if file is newer than another
-ot  # if file is older than another
-ef  # if two files have same inode numbers

## loops
for item in LIST ;do  # for loop structure
	do work $item
done

for item in 1 2 3 4 5 ;do  # for loop, static list
	echo "$item"
done

for item in $(seq 1 10) ;do  # dynamic list using sequence cmd, legacy
	echo "$item"
done

for item in {1..10} ;do  # dynamic list using [bash] parameter expansion
	echo "$item"
done

for file in $(find /etc) ;do  # dynamic list using command substitution
	echo "$file"
done

for item in ${array[@]} ;do  # loop items in array
	echo "$item"
done

array=(one two three)
for i in $(seq 0 $(( ${#array[@]} - 1)) ) ;do  # loop array items by index using seq cmd
	echo "${array[$i]}"
done

OLDIFS="$IFS"  	# IFS default delimiter = SPACE
IFS=$'\n'	# create custom IFS delimiter
for file in $(find /etc) ;do
	echo "$file"
done
IFS="$OLDIFS"
