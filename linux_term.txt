# Linux terminal 

#!/usr/bin/env bash|python3  # env find executable
/home/$USER/.ssh/config|known_hosts  # host, hostname, identity file, pub key
/boot/grub2/grub.cfg  # boot loader gen grub-mkconfig
/root  # root home dir

/dev  # device filesystem by udev manage calls direct to kernel
 /mapper  # print volume information e.g. ll /dev/mapper

/etc
 /apparmor.d  # AppArmor profiles
 /apt/sources.list  # Debian repository source list
 /cups  # open source printing system
 /default  # default system settings config
 /dhcp/dhclient.conf  # /sbin/dhclient config file
 /environment  # Debian, $PATH var
 /group  # groups account info
 /hosts  # map hostnames to IP addrs, local server access
 /init.d  # System V Init scripts
 /inittab  # run levels
 /issue  # message to console, user display prior to login
 |lib|run/systemd/system  # systemd units
 /libuser.conf  # libuser config file
 /login.defs  # user default settings
 /logrotate.d  # log rotate profiles config
 /modules-load.d/modules.conf  # kernel modules load at boot
 /motd  # message of the day, user display after login
 /nsswitch.conf  # name service switch config file
 /pam.d  # Pluggable Authentication Module config
 /passwd  # user pd, shell, settings config, e.g. /bin/false, /bin/nologin
 /pki  # RHEL shared system certificates
 /profile.d  # login run files
 /rc.d  # System V Init file executables, custom boot server, e.g. rc.local
 /resolv.conf  # name server request list
 /securetty  # virtual terminals allow root login
 /services  # network services w/ ports
 /shadow  # user account info
 /skel  # copy files to /home/$USER
 /ufw  # Ubuntu firewall profiles config
 /X11  # video libs

/lib
 /modules/KERNEL-VER/kernel/drivers  # currently loaded kernel modules e.g. uname -r = kernel version
 /systemd/systemd-journald  # systemd journald service
 /systemd/system  # systemd config

/proc  # VFS - virtual file system representing sys info used by kernel
 /bus/pci  # PCI directory list
 /cpuinfo  # cpu, hardware stats
 /interrupts  # CPU IRQ (interrupt request) assignments
 /meminfo  # system memory usage
 /partitions  # major, minor part blocks
 /version  # cat for linux kernel version, OS flavor, gcc compiler

/sbin/shutdown -r 15  # cmd [sudo], reboot after 15 mins
/srv  # RHEL site specific data services, e.g. FTP, WWW, CVS

/sys
 /block/DEV/queue/scheduler  # set device scheduler e.g. cfq, anticipatory, deadline, noop
 /block/DEV/stat  # I/O read device info, block devices
 /class  # virtual filesystem loaded in RAM, similiar devices, memory monitor

/usr/lib
 /modules  # list kernel version
 /systemd/system/  # service and target directory e.g. graphical, multi-user.target

/usr/share/doc  # linux tool documentation
 /grep-2.20/NEWS  # grep example command usage text file

/var/log
 /boot.log  # GRUB boot log
 /kern.log  # kernel log
 /secure  # secure log - passwd failures, sudo, pam, loading rules, server listening
 /syslog  # system log
 /yum.log  # yum install log

/var/spool/cron/crontabs  # user cron jobs

# Terminal cmd, keystrokes
CMD +SPACE +TABx2  # print available cmd options e.g. yum|localctl|systemctl|service SPACE TAB TAB
F11  # terminal full screen toggle

ctrl
 +l  # clear screen
 +a  # cursor line begin
 +e  # cursor line end
 +u  # delete line
 +r  # cycle CLI cmd; ctrl+r - cycle; <enter> - execute
 +SHIFT+t  # open terminal tab
 +SHIFT+w  # close curr tab
 +page-up  # cycle tab left
 +page-down  # cycle tab right

shift
 +ctrl+page-up  # cycle tab most left
 +ctrl+page-down  # cycle tab most right

alt+<.>  # cycle CLI input arg; alt+<.> - cycle; <enter> - execute

# CLI
CMD /bin/kill  # send CMD to kill container, testing
CMD > /dev/null 2>&1  # send CMD to /dev/null, stdout, stderr 
aptitude install PKG  # use aptitude package manager

apt
 info PKG  # Debian package query
 list  # print package list installed
 search STR  # query package installed for STR
 update  # update package list to latest
 upgrade  # install package latest version
apt-get update  # Debian package update cache
apt-cache search REGEX  # Debian query APT cache, local

snap install PKG  # Debian install snap package, online

dpkg
 -i PKG  # Debian package [i]nstall
 -s PKG  # query package [s]tatus
dpkg-reconfigure  # Debian package reconfigure, local

add-apt-repository universe | multiverse  # add Debian repos e.g. install tree
apropos KEYWORD  # search manual descriptions, e.g. 'apropos vim | ^ssh | email-address'
atq # manage jobs
base64 /dev/random | head -c 10M > FILE.txt  # create FILE w/ base64 10MB random data
atrm JOB  # remove job
blkid -g  # purge cache, [g]arbage collect remove old devices
brctl  # ethernet bridge admin
bzip2  # compress, decompress block-sorting, e.g. .bz, .bz2, .tbz, .tbz2
chage -l USER  # print account age info
chattr +i FILE  # edit file attributes, [R]ecursive, [i]mmutable
lsattr FILE  # print FILE attribs e.g. [i]mmutable, [a]ppend only
lsb_release -a  # print Debian e.g. Ubuntu version | release
chgrp -R GRP DIR  # edit directory group affiliation
chown -R $USER DIR  # edit directory ownership

chmod
 -R 775 DIR  # edit directory permissions
 -R {ugo}+{rwx} DIR  # edit dir perms, [u]ser, [g]roup, [o]ther, [r]ead, [w]rite, [e]xecute
 g+s DIR  # set SGID bit to enforce group association for child entities
 +t DIR  # set sticky bit, disable deletion by non-owners

cp
 -air /src/dir/* /dest/dir  # copy source CONTENTS to dest
 -R /src/dir /dest/dir  # copy source DIR to dest

crontab -lu USER  # print [u]ser cron job [l]ist
curl -f URL  # download URL [f]ail silently

date
 --date "+60 days"  # curr time + 60 days
 +%F  # e.g. 2021-11-27
 +%F_%R  # e.g. 2021-11-27_23:38

dd if=
 /dev/sdX of=/mnt/bkup/os_image_$(date +%F).img  # save image from /dev/sdX to /mnt/bkup
 /dev/urandom of=/dev/sdX  # write random data to /dev/sdX
 /dev/zero of=/dev/sdX  # write zeros to /dev/sdX

depmod -A  # gen modules.dep file, map files, exits if older then curr
df  # print disc filesystem space usage
dig SRV  # query mail server

dmesg
 |-D  # print kernel ring buffer, [D]isable console logging
 -H -l err  # print kernel [l]evel log errors, [H]uman readable output


du  # print file space usage
dumpe2fs -b DEV  # print device bad blocks
e2label DEV LABEL  # label device, e.g. e2label /dev/sdX WEB_SERVER

echo
 $HOME  # print home variable
 $UID  # print user id
 -n "value" | openssl md5 -hmac "key"  # gen md5 hash from data input

ethtool DEV  # print net driver and hd setting for DEV
env  # print user environment variables
eog FILE  # GNOME Image Viewer
[g|p]arted  # partition editor
[f|g]disk -l DEV  # manage device partitions, e.g. fdisk -l DEV ; fdisk < gdisk < parted < gparted
fsck -R|r DEV  # filesystem check, skip [R]oot filesystem, [r]epair

find . -inum INODE -exec rm -i {} \;  # by INODE, remove [i]nteractively e.g.> ll|ls -li
find /var/log -type f -size +100k  # /var/log, size > 100 KB
find . -type d|f -iname STR  # find [d]irectory, [f]ile for value STR

find . -type f -iname 
 *.txt -exec mv {} {}.append_string \;  # append string to filename
 *.txt -exec rsync {} $USER@192.168.10.1:/home/$USER \; # copy-update from curr dir to network node
 *.bin -exec mv -t /tmp/dump {} \;  # move to '/tmp/bin'
 *.svn -exec rm -rvf {} \;  # remove all
 *.java -exec sed -i 's/original/replace/g' {} \;  # replace file contents text [i]n-place

find . -type f
 -mmin -30  # created most recent 30 minutes
 -size 0 -or -size +100k -mmin -30  # empty or > 100 KB, updated most recent 30 minutes


for i in {1..10}; do sudo cp -R /etc /backup/sys; done &  # copy dir N-times, exec in background
for f in *;
 do echo "append_this_string_to_current_file_contents" >> $f; done
 do mv "$f" `echo $f | tr ' ' '_'` ; done  # edit filename from SPACE to UNDER_SCORE, single char, no recurse
 do mv "$f" "${f//old_string/new_string}" ; done  # replace filename string, no recurse
 do mv "$f" "${f//old_string/}" ; done  # replace filename string with 'nothing', no recurse


grep
 --exclude-dir=.svn 'DEPRECATED_'  # search keyword, exclude dir
 -niR '.sh' DIR  # search contents, [n]line number, [i]gnore case, [R]ecursive, no asterisk!
 '^(str)' .  # search curr dir, begin str
 -v '^(str)' .  # search curr dir, exclude matches
 -w 'test' .  # search curr dir, match whole word only

getent
 group GRP  # print group membership list
 hosts  # print hosts db

getfacl DIR  # print ACL attribs for DIR
setfacl -R -m g:GRP:r DIR  # grant read-only perms to GRP for DIR
getsebool -a  # SELinux print boolean list
gpg --gen-key|send-key  # generate key pair, send to server
groupmod -n OLD NEW  # edit group [n]ame from OLD to NEW
groups USER  # print USER groups

head
 -30 /dev/urandom > FILE  # write begin 30 lines from input to FILE
 -c 100G < /dev/urandom > FILE  # read 100 GB data write to FILE
 -n10 FILE  # print FILE first 10 lines

history NUM  # print history last NUM lines 
host  # DNS lookup utility
iconv --list # print coded character sets
init 6  # systemd service manager, reboot
iostat DEV  # print DEV read | write stat
ioping -c NUM DEV  # ping latency request to DEV NUM times

ip
 addr show |DEV  # print net device ip info
 monitor -t  # listen for net link traffic, [t]imestamp
 route  # print local route table entry

iptables -nL  # print ip table rules [L]ist, [n]umeric output addr port
iptables-save  # save config file, IPv4/6 packet filtering, NAT admin tool
iwconfig  # print wireless devices
jobs  # print curr jobs

journalctl
 --disk-usage  # print journal filesystem usage
 -u SRVC  # print journal entries for SRVC

kernel-install  # edit kernel, initramfs images from /boot

kill
 %1  # kill job 1
 -9 PID  # kill proc by PID, ugly, ungraceful
 %JOB  # kill by job number
 -l  # [l]ist kill signal functions

klist  # print curr kerberos certificates
last  # print curr user login events
lastb  # print user accounts w/ auth attempts
lastlog  # print user last login session info
ldconfig  # configure dynamic linker run-time bindings, print cache
ldd DEV   # print shared object deps, e.g. /bin/bash
less -C FILE  # print contents, mouse nav, [C]lear previous contents
locate FILE  # find FILE, local db

localectl # print keyboard and layout settings e.g. localectl status
 list-locales  # print locales
 list-keymaps  # print keyboard mappings

lshw  # pring hardware metrics
ln -s path/to/dir |TEXT  # create 'soft' link; DO NOT append '/'

ls
 -li  # print dir inode numbers
 -Z FILE  # print SELinux security context for FILE

lsmod | sort | less  # print currently loaded kernel modules

lsof
 -i  # list open files w/ process, [i]nternet
 -u USER  # list open files by USER

lspci -nn|v|vv|vvv  # list PCI devices, vendor codes, numbers, names, [v]erbose
lsusb -tv  # list USB devices, [t]ype, [v]erbose
md5sum FILE  # print MD5 message digest
mkfs.ext4 -F DEV  # format DEV to ext4 [F]orce
mke2fs -t ext2|3|4  # create filesystem
modinfo DEV.ko.xz  # print kernel module info e.g. modinfo /lib/modules/.../drivers/bluetooth/btusb.ko.xz
more FILE  # print contents, forward only

mount
 | column -t  # output contents in column format e.g. package=util-linux
 -a  # mount [a]ll filesystems in fstab
 -t  # specify filesystem [t]ype

nc |-lp SERVER PORT  # netcat [l]isten [p]ort PORT e.g. nc server02 22
netstat -tuplen | grep "LISTEN"  # print listening ports
nmap -sV SERVER -p PORT  # print SERVER port status e.g. nmap -sV server02 -p 21

nmcli
 connection show  # print network device metrics: name, UUID, type, device
 device show  # print network device status: device, type, state, connection
 con up|down DEV  # enable|disable net DEV e.g. ens32
 con edit DEV  # open Net Manager dev editor > set ipv4.address 10.50.1.101/24

nmtui  # text UI for Net Manager
nslookup SERVER  # print name SERVER ip addr

od
 -vAn -N1 -td1 < /dev/urandom  # write 1 byte signed decimal integer
 -vAn -N2 -tu2 < /dev/urandom  # write 2 byte unsigned decimal integer

pgrep SRVC-NAME  # return service process id
pidof PROG  # print process id of running program, e.g. firefox

ping
 -c NUM  # execute ping NUM times
 -I INT  # ping from specific outbound interface

pkill PID  # kill proc by id
printenv  # print user environment variables
ps -elf | grep -i "EXPR"  # print process for EXPR
readonly  # print shell read-only variables
renice  # alter priority of running processes
rename -- .old-ext .new-ext *.old-ext  # rename file extension
rmmod -f ARG  # [f]orce kernel mod ARG remove
rsync -havz SRC DEST  # remote copy, sync files [h]uman readable, [a]rchive, [v]erbose, [z]compression
runlevel  # print previous and current System V Init runlevel
sar -u  # print performance info e.g. 'sar 2 6' - 2 sec interval, 6 queries total
screen | tmux  # terminal session multiplexer
setsebool -P  # SELinux write curr values to disc at reboot
sha256sum  # print SHA256 message digest
shutdown -c  # cmd [sudo], interrupt stop reboot sequence
snap info PKG  # Linux cross distribution, dependency app installer

sort
 -k COLUMN
 FILE | uniq  # remove duplicates

ss -p | grep EXPR  # print sockets w/ PIDs
su -l|c  # substitute user, [l]ogin, issue [c]ommand to shell
swapon  # print swap file metrics

systemctl
 daemon-reload  # reload the systemd manager configuration
 isolate graphical.target | multi-user.target  # launch UI | cli
 set-default TARGET  # set default target at boot
 get-default  # return default target at boot
 reboot -i
 status --all |SRVC  # print units runtime status
 --type=service|target  # print system services | targets
 list-units |grep -i "service | target | mount"  # print curr loaded modules
 start | stop | | restart |enable | disable SRVC  # manage SRVC

systemd-analyze |blame | dump  # print startup process times, longest decending, dump manager logs

tar 
 PARM --exclude=GLOB | --remove-files  # exclude file glob pattern, remove files after archiving
 -zcvf TAR DIR|FILE  # [c]reate archive, g[z]ip compression, [v]erbose, [f]ile from CONTENTS
 -tvf TAR  # print archive file list, [t]list
 -zxvf TAR -C DIR  # e[x]tract archive to DIR

jar
 -tf JAR  # print file list
 -xf JAR FILE  # extract FILE
 -tf | grep FILE

rpm
 -ivh PKG|*  # RHELx Fedora install local rpm [i]nstall, [v]erbose, [h]ash marks
 -e PKG  # [e]rase or uninstall package
 -qa PKG  # query PKG name exact
 -qa | grep NAME  # grep package name unknown
 -qi PKG  # query PKG installer info
 -ql PKG  # query PKG installer files
 -ql <<< rpm -qa ksh | sort > FILE  # print to file PKG installer files from common name

dnf
 install PKG  # Fedora install PKG
 search PKG   # Fedora search PKG

yum
 list installed | sort  # RHELx Fedora print yum local rpm packages installed
 -v repolist  # print connected repos [v]erbose: base url, last updated, etc.
 list "python*"  # print packages, default exclusive
 search "python"  # search repo db, default inclusive
 deplist PKG  # Fedora print deps list, e.g. yum deplist python36-rpm.x86_64
 info PKG  # Fedora query PKG info
 install -y epel-release cups-pdf
 provides CFG  # print config file package association e.g. yum provides /etc/vsftpd/vsftpd.conf
 remove -y PKG  # remove PKG

yumdownloader
 PKG --destdir DIR --resolve
 python36 --destdir ~/Downloads/python36/ --resolve  # directory created if no exist

tail
 -f FILE  # print file appends
 -n10 FILE  # print FILE last 10 lines
 -n+500 FILE  # print FILE line 500->EOF

tcpdump -i DEV  # dump [i]nterface DEV traffic e.g. sudo tcpdump -i ens32
telinit CMD  # edit System V Init runlevel
top  # M - organize by memory, P - cpu usage, r - renice, reprioritizer PID
touch /home/$USER/file{1,2,3}  # create file1, file2, file3 in /home/$USER
traceroute -T DEST  # run trace w/ tcp packets, def port 80
truncate -s 0 FILE  # truncate FILE to [s]ize, delete alternative
tune2fs -l DEV  # view DEV filesystem info

udevadm
 control -R  # reload rules file
 monitor -u  # print received udev events

ulimit -a  # print cpu stats, virtual mem, stack size
umask  # print default file perms, e.g. 666-umask=default
unzip ARCH.zip  # extract contents to curr dir
useradd -D  # print user default attribs

usermod
 -aG GRP USER  # add curr user to GRP or specify USER, [a]ppend, [G]roup
 -L|U USER  # [L]ock | [U]nlock USER account
 -m|d DIR USER  # [m]ove USER home [d]irectory to DIR

users  # print users logged in
virt-install  # install vm
visudo  # edit sudoers file - run cmds as root without root password
vmstat -d 5 3  # print virtual mem usage, [d]evices, 5 sec interval, 3 queries total
wget URL -o FILE  # non-interactive network downloader, e.g. HTTP{S}, FTP, [o]utput to FILE
whatis CMD  # print one-line manual page description
whereis -OPTIONS CMD  # locate binary, executable
whois FQDN  # query whois db for network node
who  # print users logged in
w  # print users logged in, session info
wc -l  # print word count, [l]ines e.g. ls DIR | wc -l = file count
xkill WINDOWED-SERVICE  # kill windowed service by name | mouse
xrdp PARMS  # MS remote desktop tool, start xrdp daemon, edit firewall exceptions
xz -k DIR|FILE  # compress CONTENTS [k]eep original .xz, .lzma
lpr FILE.txt  # CUPS, convert text FILE to pdf, def dest /home/$USER/Desktop
lpq  # list printer queue
zip -r ZIP DIR|FILE  # compress CONTENTS [r]ecursive

dirs  # print dir stack
 -c  # clear stack
popd  # pop stack
pushd DIR  # push to stack

# SED - model
echo $ENV | sed REGEX  # echo var, exec cmd
cat IN_FILE | sed REGEX > OUT_FILE  # print file, exec cmd, write to output
sed REGEX << cat IN-FILE | sed REGEX ...  # chain multiple cmd to input file
find PARM -exec sed PARM REGEX {} \;  # pipe 'find' to 'sed' (e.g. specify file type)

sed -e|i|n REGEX FILE   # [e]xpression, edit file [i]n-place, [n]-quiet|silent
 '/^$/d'  		# delete empty lines
 '/.*delete-line/d'  	# delete lines containing
 's/:/\n/g'  		# e.g.> echo $PATH, pipe sed, replace ':' for 'newline'
 's/ss//g'  		# remove 'ss' all occurrences, [g]lobal
 's/ */_/g'     	# replace SPACE with UNDER_SCORE for text in file
 's/.*delete-sequence//'  # delete up to sequence, inclusive
 's/delete-sequence.*//' # delete after sequence, inclusive 
 's/^/prefix/' 	 # add prefix to all lines

sed -n  # print lines
 N1,N2p FILE  	# print line number range, N1 - N2
 -e N1p -e N2p FILE  # print lines N1 and N2
 N1p FILE  	# print line N1

# tools
cmatrix  # 'matrix' animation
tmux  # terminal multiplexer
 ctrl+b  # prefix
 ?  # help
 %  # split horiz
 "  # split vert
 x  # close
 d  # detach
~/.tmux.conf
set -g
 default-terminal 'screen-256color'  # improve colors
 history-limit 10000
 status-fg green
 status-bg black

# create local repo
find . -iname "*.rpm" -exec mv '{}' ./rpm-dir \;  # move rpms to local dir
cd /local/rpms/customrepo.repo  # browse to rpm local dir
createrepo .
sed 's/enabled = 0/enabled = 1' /etc/yum.repos.d/redhat.repo
yum repolist
yum makecache
yum install PKG | --nogpgcheck  # install PKG, no gpg-key check, unofficial RHELx
rpm -ivh PKG --nodeps  # install PKG, ignore dependencies, official RHELx

# create filesystem, mount
lsblk  # print connected devices w/ mounts
mkdir -p /mnt/dd1 /mnt/dd2  # create directories for device
parted /dev/sdX print  # print device info
parted /dev/sdX mklabel gpt  # set device label
parted -a optimal /dev/sdX mkpart primary 0% 100%  # create device partition
mkfs -t ext4 /dev/sdX  # create device file system type e.g. ext4
mkfs.ext4 /dev/sdX  # deprecated
blkid  # print connected devices w/ UUID, partUUID, label, partition type
e2label DEV LABEL
e2label /dev/sdX NEW_MOUNT

cp -air /etc/fstab /etc/fstab.bak  # backup fstab
vim /etc/fstab  # edit fstab  w/ UUID, label
# UUID="ALPHA-NUMERIC" | LABEL  MOUNT  FS-TYPE  OPTIONS  DUMP PASS
# UUID="b58ce781-4a45-496a-8cd3-ab28d3cef783"  /mnt/dd1  ext4  defaults  1 2
# LABEL=NEW_MOUNT  /mnt/dd1  ext4  nofail  1 2
mount -L LABEL MOUNT  # mount using label
mount -a  # test mounts, sudo

# SSH Key cfg
ssh-keygen  # creates public, pvt key pair
 ~/.ssh/id_rsa  # pvt key
 ~/.ssh/id_rsa.pub  # public key
 ~/.ssh/authorized_keys  # connecting device pub key file
ssh-copy-id SRV  # copy pub key to server

# VIM
e  # next word, end
w  # next word, begin
b  # prev word, begin
p  # paste
x  # delete char
y  # yank
cl  # cut letter
cw  # cut word
cc  # cut line
dd  # delete line
dl  # delete letter
d$|D  # delete from cursor to EOL
dw  # delete word
yl  # yank letter
yw  # yank word
yy  # yank line
u  # undo

ctrl
 +r  # redo
 +o  # jump back
 +i  # jump forward
 +g  # print filename
 +o  # back 1 page
 +b  # back full screen
 +f  # forward full screen
 +d  # forward 1/2 screen
 +u  # back 1/2 screen
 +v [visual block], w - jump next column, x - delete, SHIFT+i ADD-TEXT + esc - apply changes
gg  # FILE top
SHIFT+g  # FILE bottom

:!  # run external cmd
:x!  # save, overwrite, preserve timestamp if no changes
:wq!  # save, overwrite, clobber timestamp no matter
:He  # open horizontal view - file browser
:Ve  # open vertical view - file browser
:e  # open file
:noh  # disable highlights
:set
 hls  # enable highlight search
 nohls  # disable highlight search
 number
 nonumber

/\<TEXT\>  # exclusive search

:%s
 /\<TEXT\>/NEW-TEXT/g  # exclusive search, copy replace [g]lobal
 /TEXT/NEW-TEXT/  # copy replace, first instance
 /TEXT/NEW-TEXT/g  # copy replace, global

## tabs
vim -p FILE1, FILE2  # open in tabs
:tab help
:help tab-page-intro
:tabf FILE  # open existing file in tab
:tabnew FILE  # open new file in tab
:tabn | 'gt' | ctrl+PgDn  # tab next
:tabp | 'gT' | ctrl+PgUp  # tab prev
:tabfirst  # go to first tab
:tablast  # go to last tab
:tab 3  # go to tab 3
:tabm N  # move tab to N pos
:tabdo REGEX  # apply REGEX to all tabs

## split
vim -o FILE1 FILE2  # horiz split => :split
vim -O FILE1 FILE2  # vert split => :vsplit
ctrl+w, j|k|l|i  # switch to adjacent window
ctrl+w, left-arrow, right-arrow

:qa  # [q]uit [a]ll
:wqa  # [w]rite [q]uit [a]ll

imap, t <Esc>:tabnew<CR>  # e.g.>  map 't' -> 'tab new', ~/.vimrc

# Ant, Maven
nohup ant &  # run ant background process, log to nohup.out

ant
 -p  # print ant commands, must be in build.xml dir
 commonClean all
 clean 2>&1 | tee -a antlog_$(date +%F_%R).log  # logger, stderr, stdout to log file
 all
 cmAll
 html
 mvnDeploy  # deploy ant maven artifacts to Nexus repo (see pom for url)

mvn
 -p  # print maven commands, must be in build.xml dir
 compile
 compile clean

# Python3 - CLI Interrupter
pydoc modules  # print python local installed modules
python3  # start python interpreter
>>> import vlc
>>> import sys
>>> print(vlc.__file__)  # print 'vlc' library file location
>>> print(sys.path)  	 # print python system path(s)
>>> sys.path.append("path/to/custom/bin")  # append to sys path
>>> help("modules")  	 # print local modules installed, get help info
>>> help("_struct")

## PIP3 - python3 plugin manager
yum install -y python36
pip3
 install --upgrade pip
 download -d . "pywinrm>=0.3.0"  # dl python3 pywinrm plugin installer
 install --no-index --find-links *  # install plugin w/ deps local, offline mode

# RAID 
RAID 0 = stripe, no parity, no disk failures (max performance)
RAID 1 = mirror (1-to-1 disk backup)
RAID 4 = stripe, parity on single disk
RAID 5 = stripe, parity across all disks, max one disk failure
RAID 6 = stripe, double parity across all disks, max two disk failures
RAID 10 = (1 + 0) mirroring + striping

[g|f]disk /dev/sdX  # gdisk > 2 TB
> n # new partition
> Partition number = (default)
> First Sector = (default)
> Last Sector = (default)
> Hex code or GUID = fd00  # RAID partition type code
> t  # change partition type
> p  # print partition
> w  # write to disk

mdadm --create
 RAID-DEV --level=LEVEL --raid-devices=NUM DEV{1,2,..}  # create RAID partition at LEVEL for NUMber of DEVs
 /dev/md1 --level=0 --raid-devices=2 /dev/sdb /dev/sdc  # create RAID /dev/md1, RAID 0, 2 devices at /dev/{sdb, sdc}

## mount partition
mkfs -t ext4 /dev/md1
mkdir /raid_root
chown -R USER /raid_root
chgrp -R GRP /raid_root
mount /dev/md1 /raid_root

vim /etc/fstab  # edit file system table
/dev/md1  /raid_root  ext4  defaults  0  0

## mdmonitor service - mount, start, test
mount -a  # auto-mount fstab entries, sudo
cat /proc/mdstat  # show RAID personality overview
mdadm --detail /dev/md1  # show RAID part details: sz, dev, state
systemctl enable mdmonitor  # enable service at runtime
systemctl start mdmonitor  # auto start service at boot

# LVM - physical > volume > logical
pvscan  # print physical volume info
pvdisplay  # print physical volume detail
vgscan  # print volume group info
vgdispay  # pring volume group detail
lvscan  # print logical volume info
lvdisplay [VGLABEL]  # print logical volume detail e.g. sudo lvdisplay backup

pvcreate DEV1 DEV2 ..  # create physical volume across devices
vgcreate VGLABEL DEV1 DEV2 ..  # create volume group from physical volume assignments
lvcreate --name LVNAME --size LVSIZE VGLABEL  # e.g. sudo lvcreate --name sysbk --size 1GB backup

lvextend -L{SIZE} LV-DEV  # extend logical volume to SIZE e.g. sudo lvextend -L5GB /dev/backup/databk
lvreduce -L{SIZE} LV-DEV  # reduce logical volume to SZIE e.g. sudo lvreduce -L1GB /dev/backup/logbk
mkfs.ext4 LV-DEV  # create logical volume filesystem
mount LV-DEV MOUNTDIR  # mount logical volume e.g. sudo mount /dev/backup/sysbk /backup/sys
umount DIR  # unmount previous mounted device
LVDEVCE DIR TYPE defaults 0 0  # edit entries to /etc/fstab for auto mount on reboot
e.g.> /dev/backup/sysbk /backup/sys xfs defaults 0 0  # fstab example

# CRYPTO cfg
shred FILE  # overwrite FILE contents, secure wipe
cryptsetup OPTIONS ACTION ACTION-ARG  # manage volume encryption
cryptsetup -v --verify-passphrase luksFormat VOLUME  # prompts for UPPER case 'YES'

# Sudoers file - visudo
student01 ALL=(ALL) NOPASSWD:ALL  # student01 acc exec all sudo cmds w/o switch 'su -' & no pd

# C++ compiler - example, test (g++, gcc)
vim foo.c
#include<stdio.h>
int main(void){
	printf("Hello World!\n");
	return 0;
}
cc foo.c -o foo
./foo

# Ports
20 tcp|udp ftp  # file transfer protocol, data
21 tcp|udp ftp  # file transfer protocol, control
22 tcp ssh  # secure shell
23 tcp|udp telnet  # remote unencrypted text-based comms
25 tcp smtp  # simple mail transfer protocol
53 tcp|udp dns  # domain name server
69 udp tftp  # trivial file transfer protocol
123 udp ntp  # network time protocol
161 upd snmp  # simple network mngmt protocol
389 tcp|udp ldap  # light weight directory access protocol
631 tcp cups  # common Unix printing system
636 tcp ldaps  # light weight directory access protocol secure
1194 tcp|udp openvpn  # virtual private network server
3128 tcp squid  # proxy server
3306 tcp sql  # MS proprietary relational db manager
5900 tcp|udp vnc  # virtual network computing
