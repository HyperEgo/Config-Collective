#!/usr/bin/env bash|python3  # env find executable
/boot/grub2/grub.cfg  # boot loader, generated by grub-mkconfig
/dev/..  # device fs usu managed by udev, comms direct to kernel
/etc/apparmor.d  # AppArmor profiles
/etc/apt/sources.list  # Debian repository source list
/etc/apt/sources.list  # Debian, repo source list
/etc/cups/..  # open source print system
/etc/default  # default system settings and config
/etc/dhcp/dhclient.conf  # config file for /sbin/dhclient
/etc/group  # group account info
/etc/hosts  # mapping of hostnames to IP addresses, usu local server access only
/etc/init.d  # contains System V Init scripts
/etc/inittab  # run levels
/etc/issue  # message to console, display prior to user login
/etc|lib|run/systemd/system  # contains systemd units
/etc/libuser.conf  # config file for libuser
/etc/logrotate.d  # log rotate profiles and config
/etc/modules-load.d/modules.conf  # kernel modules to load at boot time
/etc/motd  # message of the day, display after user login
/etc/nsswitch.conf  # name service switch config file
/etc/pam.d/..  # Pluggable Authentication Module config files
/etc/passwd  # user pd, shell config, e.g. /bin/false, /bin/nologin
/etc/pki  # RHEL shared system certificates
/etc/profile.d  # run files at login
/etc/rc.d/..  # System V Init file executables e.g. rc.local - custom boot srv
/etc/resolv.conf  # name server request list
/etc/securetty  # virtual terminals allowed root login
/etc/services  # network services w/ ports
/etc/shadow  # user account info
/etc/skel  # copy file(s) to /home/$USER
/etc/ufw  # Ubuntu firewall profiles and config
/etc/X11  # video libs
/home/$USER/.ssh/config  # host, hostname, identity file
/home/$USER/.ssh/known_hosts  # public key hostname info
/lib/systemd/systemd-journald  # systemd journald service
/lib/systemd/system  # systemd config files
/proc/bus/pci  # PCI directory list
/proc/interrupts  # CPU IRQ (interrupt request) assignments
/proc/meminfo  # detailed system memory usage
/proc/partitions  # major, minor part blocks
/srv  # RHEL site specific data for services, e.g. FTP, WWW, CVS
/sys/block/DEVICE/stat  # I/O read device info
/sys/block  # system block devices
/sys/class/..  # virtual fs (RAM), groups similiar devices, mem monitor ../mem
/usr/lib/modules/  # list kernel versions(s)
/var/log/kern.log  # kernel logs
/var/log/syslog  # system logger
/var/spool/cron/crontabs  # user cron jobs

apropos CMD  # search manual descriptions, e.g. 'apropos vim|^ssh|email address'
apt-cache search REGEX  # query the APT cache, search available package lists
apt-get update  # Debian update package cache
apt info PKG  # Ubuntu, Debian (Advance Package Tool) package info
atq -V  # print 'at' version, manage jobs
atrm JOB  # remove job
blkid -g  # purge cache, remove old devices
brctl  # ethernet bridge administration
bzip2  # compress, decompress block-sorting alg files .bz, .bz2, .tbz, .tbz2
cat FILE | sort | uniq -d|u # print [d]uplicates or [u]nique data names
chage -l USER  # print account age info
chattr -R +i FILE  # change file attributes, [R]ecursive, [i]mmutable
chgrp -R GROUP /mnt  # change directory group affiliation
chmod -R 775 /mnt  # edit directory permissions
chown -R USERNAME /mnt  # change directory ownership
CMD /bin/kill  # test kill command
CMD > /dev/null 2>&1  # send to stdout, stderr to /dev/null
CMD > /dev/null  # send command to null
cp -air /src/dir/* /dest/dir  # copy source contents to dest
cp -air /src/dir /dest/dir  # copy source to dest
cp -OPTIONS SRC DEST
crontab -lu USER  # print [u]ser cron job [l]ist
curl -f URL  # transfer, dl URL, [f]ail silently
date --date "+60 days"  # e.g. 'Wed 26 Jan 2022 11:41:27 PM CST'
date +%F  # e.g. '2021-11-27'
date +%F_%R  # e.g. '2021-11-27_23:38'
dd if=/dev/sdX of=/mnt/bkup/os_image_$(date +%F).img  # save image from sdX
dd if=/dev/urandom of=/dev/sdX  # write random data to sdX
dd if=/dev/zero of=/dev/sdX  # write zeros to sdX
depmod -A  # generate modules.dep and map files, exits if older
df  # report file system disk space usage
dig SERVER  # query mail server
dmesg -D  # disable console logging
dmesg  # print kernel ring buffer
dnf install PKG  # Fedora package manager, install
dnf search PKG   # Fedora package manager, search
dpkg -i PGK  # Debian [i]nstall package
dpkg-reconfigure  # Debian reconfigure installed package
dpkg -s PKG  # Debian [s]tatus package name
du  # estimate file space usage
dumpe2fs -b DEVICE  # print bad blocks
e2label DEVICE LABEL  # label device, e.g. 'e2label /dev/sdX Webserver'
echo $GID  # print user group id
echo $HOME  # print home variable contents
echo $UID  # print user id
echo -n "value" | openssl md5 -hmac "key"  # example create md5 hash
env  # print user environment variables
fdisk -l DEVICE  # edit, [l]ist part table, e.g. 'fdisk -l /dev/random'
find . -iname "FILE"
find . -iname "FILE*"  # find files beginning w/ "FILE"
find . -iname ".svn" -exec rm -rvf "{}" \;  # remove .svn file recursively
find . -inum INODE -exec rm -i "{}" \;  # delete file by inode number
find -OPTIONS PATH EXPR FILE
find . -type f \( -iname \*.jpg -o -iname \*.png \)
find . -type f \( -iname \*.txt \)
fsck  # filesystem check
fsck -R  # check filesystem, skip root fs
getent  # get entries from Name Service Switch libraries
getent group GROUP  # print group membership list
getent hosts  # print hosts db
getsebool -a  # SELinux print boolean list
gpg --gen-key|send-key  # generate | send key pair to | from server
grep --exclude-dir=.svn 'DEPRECATED_'  # search keyword, exclude dir
grep -niR '*.sh' DIR  # search contents, [n]line number, [i]gnore case, [R]ecursive
grep -OPTIONS EXPR DIR # global regular expression search
grep '^/' .  # search curr dir for beginning str
grep -v '^/' .  # search curr dir, exclude matches
grep -w 'test' .  # search curr dir, match whole word only
groupmod -n OLD NEW  # change group [n]ame
groups USER  # print USER groups
head -30 /dev/urandom > FILE  # write beginning 30 lines from ../urandom
head -c 100G < /dev/urandom > FILE  # read 100 GB data blks from ../urandom, write to FILE
head -n10 FILE  # print FILE first 10 lines
head -OPTIONS FILE
history NUM  # print command history, last NUM lines 
iconv --list # print coded character sets
init 6  # systemd service manager, reboot
ip addresss  # print interface ip address(es)
ip monitor -t  # listen for net link traffic, [t]imestamp
ip route  # print local route table entries
iptable -nL  # print ip table rules [L]ist, [n]umeric output addr port
iptables-save  # admin tool for IPv4/6 packet filtering, NAT, save config file
iwconfig  # print wireless devices
jobs  # print curr jobs
journalctl --disk-usage  # print journal fs usage
kernel-install  # add, remove kernel and initramfs images to and from /boot
kill %1  # kill job '1'
kill -9 PID  # ugly kill proc by name | id
kill %JOB  # kill job
kill -l  # print, [l]ist kill signal functions
klist  # print curr kerberos certificates
lastb  # print list of last logged users
ldconfig  # onfigure dynamic linker run-time bindings, print cache
ldd /bin/bash   # print shared object dependencies
less -C FILE  # browse contents, fwd | bkwd mouse nav, [C]lear scrn
locate FILE  # find file using local db
lsattr FILE  # list file attribute
lshw  # list hardware metrics
ls -li  # print file inode numbers
lsof -i  # print open file listing [i]nternet
lspci -nn|v|vv|vvv  # list all PCI devices, vendor codes, numbers, names, [v]erbose
lsusb -tv  # list USB devices, [t]ype, [v]erbose
ls -Z FILE  # SELinux print file security context
lvcreate -L SIZE LABEL  # create logical volume
mke2fs -t  # create filesystem, e.g. ext3, ext4
more FILE  # browse contents, forward nav only
mount -a  # mount [a]ll filesystems in fstab
mount -o  # specify [o]ptions
mount -t  # specify filesystem [t]ype
nc -lp PORT  # netcat port listen
netstat -tuplen | grep "LISTEN"  # print listening ports
nmap -sX HOST  # execute xmas scan, e.g. localhost
nslookup SERVER  # print name server ips
od -vAn -N1 -td1 < /dev/urandom  # write 1 byte signed decimal integer
od -vAn -N2 -tu2 < /dev/urandom  # write 2 byte unsigned decimal integer
openssl md5 -hmac "key"  # use open ssl and md5 for hash value, pipe to
parted  # part manipulation program
passwd -aS  # print [a]ll user(s) password [S]tatus info
pidof PROG  # print process id of running program, e.g. firefox
ping -c NUM  # execute ping NUM times
ping -I INT  # ping from specific outbound interface
pkill PID  # kill proc by id
printenv  # print user environment variables
ps -elf | grep -i "EXPR"  # print process for EXPR
readonly  # print shell read-only variables
renice  # alter priority of running processes
rmmod -f ARG  # [f]orce kernel mod remove
rpm -ivh *  # local rpm [i]nstall, [v]erbose, [h]ash marks
rpm -ql <<< rpm -qa | sort >> FILE  # print install packages, output to file
rsync -havz SRC DEST  # remote copy, synchronize files [a]rchive (save perms), [v]erbose, [h]uman readable, [z]compression
runlevel  # print previous and current System V Init runlevel
screen | tmux  # terminal multiplexer
setsebool -P  # SELinux write curr values to disc at reboot
snap info PKG  # cross distribution, dependency free app installer
sort -k COLUMN
ss -p | grep EXPR  # print sockets w/ attached PIDs
su -l|c  # substitute user, [l]ogin, issue [c]ommand to shell
swapon  # print swap file metrics
systemctl daemon-reload  # reload the systemd manager configuration
systemctl get-default  # systemd service manager, return the default target to boot into
systemctl isolate UNIT  # systemd service manager, start unit w/ deps, stop all others
systemctl list-units | grep "service"  # print curr running service(s)
systemctl list-units  # print available units and services
systemctl status --all  # print units runtime status
systemd-analyze dump  # dump systemd manager logs
tail -f FILE  # print active file appended data
tail -n10 FILE  # print FILE last 10 lines
tail -n+500 FILE  # print FILE line '500' to EOF
tail -OPTIONS FILE
tar --exclude=PATTERN  # exclude file glob pattern
tar --remove-files  # remove files from disc after adding to archive
tar -zcvf ARCH.tar.gz *  # [c]reate archive, g[z]ip compression, [v]erbose, all [f]iles in curr dir
tar -zcvf ARCH.tar.gz /path/to/contents  # e[x]tract archive to dir
tar -ztvf ARCH.tar.gz  # print archive file list
tar -zxvf ARCH.tar.gz -C /remote/dir  # extract archive to remote dir
tcpdump  #  dump traffic on a network
telinit CMD  # change System V Init runlevel
traceroute -T DEST  # execute trace w/ tcp packet, def port 80
tune2fs -l DEVICE  # view filesystem info
udevadm control -R  # reload rules files
udevadm monitor -u  # print received udev events
ulimit -a  # print cpu stats, virtual mem, stack size
umask  # print default file perms, e.g. 666-umask=default
unzip ARCH.zip  # extract contents to curr dir
usermod -aG GROUP  # add to group, [a]ppend, [G]roup
usermod -aG GROUP USERNAME  # add group to user-name account
usermod -L|U USER  # [L]ock | [U]nlock user account
usermod -m -d /newhome/username USER  # [m]ove user home [d]irectory
usermod -m  # [m]ove user home dir contents
users  # print users curr logged in
var/log/yum.log  # yum install log
virt-install  # install vm
visudo  # edit sudoers file - execute cmds as root user, without root password
wget URL -o LOG  # non-interactive network downloader e.g. HTTP/S, FTP, log [o]utput to file
whatis CMD  # print one-line manual page descriptions
whereis -OPTIONS CMD  # locate binary, executable
whois FQDN  # query whois db for network node
who  # print who is logged in
w  # print users curr logged in and session info
xkill PROC  # kill windowed service by name
xrdp PARMS  # MS remote desktop protocol, start xrdp daemon, make firewall exceptions
xz  # compress, decompress files .xz, .lzma
yum deplist PKG  # print dependency list, e.g. 'yum deplist python36-rpm.x86_64'
yum info PKG  # Fedora (Yellow Dog Updater) package info
zip -r ARCH.zip *  # compress files to archive in curr dir
zip -r ARCH.zip /path/to/contents/* /random/pic.png

# Ports common
20 tcp|udp ftp  # file transfer protocol, data
21 tcp|udp ftp  # file transfer protocol, control
22 tcp ssh  # secure shell
23 tcp|udp telnet  # remote unencrypted text-based comms
25 tcp smtp  # simple mail transfer protocol
53 tcp|udp dns  # domain name server
69 udp tftp  # trivial file transfer protocol
123 udp ntp  # network time protocol
389 tcp|udp ldap  # light weight directory access protocol
631 tcp cups  # common Unix printing system
636 tcp ldaps  # light weight directory access protocol secure
1194 tcp|udp openvpn  # virtual private network server
3128 tcp squid  # proxy server
3306 tcp sql  # MS proprietary relational db manager
5900 tcp|udp vnc  # virtual network computing

# Stack directory locations
dirs  # print stack
popd  # pop top from stack
pushd DIR  # push to top of stack

# SED parsing
sed 's/ss//g'  	# remove ss string for all occurrences on the line [g]lobal
sed 's/ */_/g'  # sub underscore for any number of spaces occurring on line
sed '/^$/d'  	# delete empty lines
sed 's/:/\n/g' <<< $PATH | sort  # print PATH content vertically
sed '/.*XML-element-delete-line/d' <<< cat INFILE | sed 's/.*XML-element-delete-up-to-char-sequence//' | sed 's/XML-element-delete-after-char-sequence.*//' | sort > OUTFILE  # parse XML elements from input file, print results to output file

## YUM Create Local Repo
find . -iname "*.rpm" -exec mv '{}' ./rpm-dir \;  # move rpms to local dir
cd /local/rpms/customrepo.repo  # browse to rpm local dir
createrepo .
sed 's/enabled = 0/enabled = 1' /etc/yum.repos.d/redhat.repo
yum repolist
yum makecache
yum install PKG | --nogpgcheck  # install package no gpg pub key check

# YUM Manage Repo
yum list installed | sort  # print yum local rpm packages installed
yum -v repolist  # print connected repos [v]erbose: base url, last updated, etc.
yum list "python*"  # print packages, default exclusive
yum search "python"  # search repo db, default inclusive
yumdownloader PKG --destdir DIR --resolve
yumdownloader python36 --destdir ~/Downloads/python36/ --resolve  # directory created if no exist

# Create, mount filesystem - sudo
lsblk  # print connected devices w/ mounts
mkdir -p /mnt/dd1 /mnt/dd2  # create directories for device
parted /dev/sdX print  # print device info
parted /dev/sdX mklabel gpt  # set device label
parted -a optimal /dev/sdX mkpart primary 0% 100%  # create device partition
mkfs -t ext4 /dev/sdX  # create device file system type e.g. ext4
mkfs.ext4 /dev/sdX  # deprecated
blkid  # print connected devices w/ UUIDs
e2label DEV LABEL
e2label /dev/sdX NEW_MOUNT

cp -air /etc/fstab /etc/fstab.bak  # backup fstab
vim /etc/fstab  # edit fstab
UUID="ALPHA-NUMERIC"|LABEL  MOUNT  FS-TYPE  OPTIONS  DUMP PASS
UUID="b58ce781-4a45-496a-8cd3-ab28d3cef783"  /mnt/dd1  ext4  defaults  1  2
LABEL=NEW_MOUNT  /mnt/dd1  ext4  nofail  1 2
mount -L LABEL MOUNT  # mount using label
mount -a  # test mounts, sudo

# SVN
A - Added
C - Conflicted
D - Deleted
I - Ignored
M - Modified
R - Replaced
X - Unrevisioned directory created by externals definition
? - Not tracked by version control
! - Missing (removed by non-SVN command)

svn ls /project/directory/branches -v  # list branches
svn log -q -l5 URL  # print logs [q]uiet, [l]ine numbers
svn co -rREV URL  # svn check out revision
svn cp SOURCE TARGET  # svn copy branch

## merge
pwd
/home/user/project-trunk  # curr trunk dir
svn up
svn merge --dry-run /project/directory/branches/branch_1
svn ci -m "merge branch_1 in to trunk"
svn -R resolved .  # svn resolve deps, [R]ecursive, **after issues corrected
svn cleanup
svn unlock --force /path/to/locked/file  # unlock file

# Ant | Maven
nohup ant &  # run ant background process, log to nohup.out
ant -p  # print ant commands, must be in build.xml dir
ant commonClean all
ant clean 2>&1 | tee -a antlog_$(date +%F_%R).log  # logger, stderr, stdout to log file
ant all
ant cmAll
ant html
ant mvnDeploy  # deploy ant maven artifacts to Nexus repo (see pom for url)
mvn compile
mvn compile clean
mvn -p  # print maven commands, must be in build.xml dir

# VIM
:e  # open file
:!  # run external cmd
:x!  # save, overwrite, preserve timestamp if no changes
:wq!  # save, overwrite, clobber timestamp no matter
:He  # open horizontal view - file browser
:Ve  # open vertical view - file browser
:noh  # turn off highlights
:set number
:set nonumber

:%s/Line/NewLine/  # copy replace 'Line' with 'NewLine'
:%s/Line/NewLine/g  # copy replace 'Line' with 'NewLine' all instances 

gg  # FILE top
SHIFT+g  # FILE bottom

y  # yank
p  # paste
x  # delete char
dd  # delete line
u  # undo
CTRL+r  # redo
CTRL+o  # jump back
CTRL+i  # jump forward
CTRL+g  # FILE name
CTRL+o  # back 1 page
CTRL+b  # back full screen
CTRL+f  # forward full screen
CTRL+d  # forward 1/2 screen
CTRL+u  # back 1/2 screen
CTRL+v [visual block], w - jump next column, x - delete, SHIFT+i ADD-TEXT + esc - apply changes

vim -p FILE1, FILE2  # open in tabs
:tab help
:help tab-page-intro
:tabf  # search file in path, open in tab
:tabf file*
:tabn | 'gt' | CTRL+PgDn  # tab next
:tabp | 'gT' | CTRL+PgUp  # tab prev
:tabfirst  # go to first tab
:tablast  # go to last tab
:tab 3  # go to tab 3
:tabm N  # move tab to N pos
:tabdo %s/foo/bar/g  # funct for all tabs

imap, t <Esc>:tabnew<CR>  # map 't' -> :tabnew

# Python
pydoc modules  # print python local installed modules
python3  # start python interpreter
>>> import vlc
>>> import sys
>>> print(vlc.__file__)  # print 'vlc' library file location
>>> print(sys.path)  	 # print python system path(s)
>>> sys.path.append("path/to/custom/bin")  # append to sys path
>>> help("modules")  	 # print local modules installed, get help info
>>> help("_struct")

# PIP plugin manager - sudo
yum update -y && yum upgrade -y
yum install -y python3
pip3 install --upgrade pip
pip3 download -d . "pywinrm>=0.3.0"  # dl python3 pywinrm plugin installer

## Test PIP plugin local install
docker inspect CONTAINER  # view container configurations, e.g. id, state metrics, network stats
docker network disconnect bridge CONTAINER  # disable network connection
pip3 install --no-index --find-links *  # install plugin w/ deps local, offline mode

# BASHRC
alias ll='ls -halF --color=auto'
alias duc='du -ch | sort -n'  # print space consumers w/ total

## prompt colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
reset=$(tput sgr0)
bold=$(tput bold)

PS1='\[$bold\]\[$blue\]\u\[$white\]@\[$bold\]\[$cyan\]\h\[$reset\]> \[$red\]\W\[$reset\] \$ '

## remove duplicates from PATH variable
function removeDupPath() {
	local foo=$(sed 's/:/\n/g' <<< $PATH | sort | uniq -u)
	local fum=$(sed 's/:/\n/g' <<< $PATH | sort | uniq -d)
	local foo+=" $fum"
	PATH=$(echo $foo | sed 's/ /:/g')
}

## edit, export PATH
PATH="$HOME/bin:$HOME/.local/bin:$PATH"
export PATH

# Terminal
CTRL+SHIFT+t  # open terminal tab
CTRL+SHIFT+w  # close curr tab

# C++ compiler test
vim foo.c
#include<stdio.h>
int main(void){
	printf("Hello World!\n");
	return 0;
}
cc foo.c -o foo
./foo

# RAID configure
RAID 0 = striping, no parity, no disk failures (max performance)
RAID 1 = mirroring (1-to-1 disk backup)
RAID 4 = striping, parity on single disk
RAID 5 = striping, parity across all disks, max one disk failure
RAID 6 = striping, double parity across all disks, max two disk failures
RAID 10 = (1 + 0) mirroring + striping

## create RAID part - g|fdisk
gdisk /dev/sdX
> n # new partition
> Partition number = (default)
> First Sector = (default)
> Last Sector = (default)
> Hex code or GUID = fd00  # RAID partition type code
> t  # change partition type
> p  # print partition
> w  # write to disk

mdadm --create /dev/md1 --level=0 --raid-devices=2 /dev/sdb /dev/sdc  # create main RAID part /dev/md1, RAID 0, two device drives

## Mount part, dir, perms
mkfs -t ext4 /dev/md1
mkdir /raid_root
chown -R USER /raid_root
chgrp -R GROUP /raid_root
mount /dev/md1 /raid_root

## Edit fstab to persist at boot 
vim /etc/fstab  # edit fstab for RAID array, sudo
/dev/md1  /raid_root  ext4  defaults  0  0

## Test mount, start mdmonitor service
mount -a  # auto-mount fstab entries, sudo
cat /proc/mdstat  # show RAID personality overview
mdadm --detail /dev/md1  # show RAID part details: sz, dev, state
systemctl enable mdmonitor  # enable service at runtime
systemctl start mdmonitor  # auto start service at boot
