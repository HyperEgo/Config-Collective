#!/usr/bin/env bash|python3  # env find executable
/boot/grub2/grub.cfg  # boot loader gen grub-mkconfig
/dev  # device filesystem by udev manage calls direct to kernel
/dev/mapper  # print volume information e.g. ll /dev/mapper
/etc/apparmor.d  # AppArmor profiles
/etc/apt/sources.list  # Debian repository source list
/etc/cups  # open source printing system
/etc/default  # default system settings config
/etc/dhcp/dhclient.conf  # /sbin/dhclient config file
/etc/group  # groups account info
/etc/hosts  # map hostnames to IP addrs, local server access
/etc/init.d  # System V Init scripts
/etc/inittab  # run levels
/etc/issue  # message to console, user display prior to login
/etc|lib|run/systemd/system  # systemd units
/etc/libuser.conf  # libuser config file
/etc/login.defs  # user default settings
/etc/logrotate.d  # log rotate profiles config
/etc/modules-load.d/modules.conf  # kernel modules load at boot
/etc/motd  # message of the day, user display after login
/etc/nsswitch.conf  # name service switch config file
/etc/pam.d  # Pluggable Authentication Module config
/etc/passwd  # user pd, shell, settings config, e.g. /bin/false, /bin/nologin
/etc/pki  # RHEL shared system certificates
/etc/profile.d  # login run files
/etc/rc.d  # System V Init file executables, custom boot server, e.g. rc.local
/etc/resolv.conf  # name server request list
/etc/securetty  # virtual terminals allow root login
/etc/services  # network services w/ ports
/etc/shadow  # user account info
/etc/skel  # copy files to /home/$USER
/etc/ufw  # Ubuntu firewall profiles config
/etc/X11  # video libs
/home/$USER/.ssh/config|known_hosts  # host, hostname, identity file, pub key
/lib/modules/KERNEL-VER/kernel/drivers  # currently loaded kernel modules e.g. uname -r = kernel version
/lib/systemd/systemd-journald  # systemd journald service
/lib/systemd/system  # systemd config
/proc  # VFS - virtual file system representing sys info used by kernel
/proc/bus/pci  # PCI directory list
/proc/cpuinfo  # cpu, hardware stats
/proc/interrupts  # CPU IRQ (interrupt request) assignments
/proc/meminfo  # system memory usage
/proc/partitions  # major, minor part blocks
/proc/version  # cat for linux kernel version, OS flavor, gcc compiler
/sbin/shutdown -r 15  # cmd [sudo], reboot after 15 mins
/srv  # RHEL site specific data services, e.g. FTP, WWW, CVS
/sys/block/DEVICE/queue/scheduler  # set device scheduler e.g. cfq, anticipatory, deadline, noop
/sys/block/DEVICE/stat  # I/O read device info, block devices
/sys/class  # virtual filesystem loaded in RAM, similiar devices, memory monitor
/root  # root user home dir
/usr/lib/modules  # list kernel version
/usr/lib/systemd/system/  # service and target directory e.g. graphical, multi-user.target
/usr/share/doc  # linux tool documentation
/usr/share/doc/grep-2.20/NEWS  # grep example command usage text file
/var/log/boot.log  # GRUB boot log
/var/log/kern.log  # kernel log
/var/log/secure  # secure log - passwd failures, sudo, pam, loading rules, server listening
/var/log/syslog  # system log
/var/log/yum.log  # yum install log
/var/spool/cron/crontabs  # user cron jobs

CMD +SPACE +TABx2  # print available cmd options e.g. yum|localctl|systemctl|service SPACE TAB TAB
for i in {1..100}; do sudo cp -R /etc /backup/sys; done &  # example 'for loop', copy, exec in background
apropos KEYWORD  # search manual descriptions, e.g. 'apropos vim | ^ssh | email-address'
apt-cache search REGEX  # query the APT cache, search available package lists
apt-get update  # Debian update package cache
apt info PKG  # Debian query PKG info
atq # manage jobs
base64 /dev/random | head -c 10M > FILE.txt  # create FILE w/ base64 10MB random data
atrm JOB  # remove job
blkid -g  # purge cache, [g]arbage collect remove old devices
brctl  # ethernet bridge admin
bzip2  # compress, decompress block-sorting, e.g. .bz, .bz2, .tbz, .tbz2
cat FILE | sort | uniq -d|u # print [d]uplicates, [u]nique names
chage -l USER  # print account age info
chattr +i FILE  # edit file attributes, [R]ecursive, [i]mmutable
lsattr FILE  # print FILE attribs e.g. [i]mmutable, [a]ppend only
chgrp -R GROUP DIR  # edit directory group affiliation
chown -R $USER DIR  # edit directory ownership
chmod -R 775 DIR  # edit directory permissions
chmod -R {ugo}+{rwx} DIR  # edit dir perms, [u]ser, [g]roup, [o]ther, [r]ead, [w]rite, [e]xecute
chmod g+s DIR  # set SGID bit to enforce group association for child entities
chmod +t DIR  # set sticky bit, disable deletion by non-owners
CMD /bin/kill  # send CMD to kill container, testing
CMD > /dev/null 2>&1  # send CMD to /dev/null, stdout, stderr 
cp -air /src/dir/* /dest/dir  # copy source CONTENTS to dest
cp -air /src/dir /dest/dir  # copy source DIR to dest
crontab -lu USER  # print [u]ser cron job [l]ist
curl -f URL  # download URL [f]ail silently
date --date "+60 days"  # curr time + 60 days
date +%F  # e.g. 2021-11-27
date +%F_%R  # e.g. 2021-11-27_23:38
dd if=/dev/sdX of=/mnt/bkup/os_image_$(date +%F).img  # save image from /dev/sdX to /mnt/bkup
dd if=/dev/urandom of=/dev/sdX  # write random data to /dev/sdX
dd if=/dev/zero of=/dev/sdX  # write zeros to /dev/sdX
depmod -A  # gen modules.dep file, map files, exits if older then curr
df  # print disc filesystem space usage
dig SERVER  # query mail server
dmesg |-D  # print kernel ring buffer, [D]isable console logging
dmesg -H -l err  # print kernel [l]evel log errors, [H]uman readable output
dnf install PKG  # Fedora install PKG
dnf search PKG   # Fedora search PKG
dpkg -i PGK  # Debian [i]nstall PKG
dpkg-reconfigure  # Debian reconfigure installed packages
dpkg -s PKG  # Debian [s]tatus PKG
du  # print file space usage
dumpe2fs -b DEVICE  # print device bad blocks
e2label DEVICE LABEL  # label device, e.g. e2label /dev/sdX WEB_SERVER
echo $HOME  # print home variable
echo $UID  # print user id
echo -n "value" | openssl md5 -hmac "key"  # gen md5 hash from data input
ethtool DEVICE  # print net driver and hd setting for DEVICE
env  # print user environment variables
fdisk -l DEVICE  # edit, [l]ist part table, e.g. fdisk -l /dev/random
find . -iname "FILE*"  # find filenames | begin w/ "FILE"
find . -iname ".svn" -exec rm -rvf "{}" \;  # delete .svn files recursively
find . -inum INODE -exec rm -i "{}" \;  # delete file by INODE number
find . -type f -iname “*.txt “ | ”*mode*.xml” | ”*.log”  # find [f]iles by ext, separate args exclusive
find . -type d -iname “log”  # find [d]irectory by keyword
find /var/log -type f -size +100k  # find [f]iles in /var/log greater than 100 KB
find /var/log -type f -mmin -30  # find files updated in last 30 minutes 
find /var/log -type f -size 0 -or -size +100k -mmin -30  # find files empty or +100 KB and updated last 30 mins
fsck [-R|r] DEVICE  # filesystem check, skip [R]oot filesystem, [r]epair
getent group GROUP  # print group membership list
getent hosts  # print hosts db
getfacl DIR  # print ACL attribs for DIR
setfacl -R -m g:GROUP:r DIR  # grant read-only perms to GROUP for DIR
getsebool -a  # SELinux print boolean list
gpg --gen-key|send-key  # generate key pair, send to server
grep --exclude-dir=.svn 'DEPRECATED_'  # search keyword, exclude dir
grep -niR '*.sh' DIR  # search contents, [n]line number, [i]gnore case, [R]ecursive
grep '^(str)' .  # search curr dir, begin str
grep -v '^(str)' .  # search curr dir, exclude matches
grep -w 'test' .  # search curr dir, match whole word only
groupmod -n OLD NEW  # edit group [n]ame from OLD to NEW
groups USER  # print USER groups
head -30 /dev/urandom > FILE  # write begin 30 lines from input to FILE
head -c 100G < /dev/urandom > FILE  # read 100 GB data write to FILE
head -n10 FILE  # print FILE first 10 lines
history NUM  # print history last NUM lines 
host  # DNS lookup utility
iconv --list # print coded character sets
init 6  # systemd service manager, reboot
iostat DEVICE  # print DEVICE read | write stat
ioping -c NUM DEVICE  # ping latency request to DEVICE NUM times
ip addr show |DEVICE  # print net device ip info
ip monitor -t  # listen for net link traffic, [t]imestamp
ip route  # print local route table entry
iptable -nL  # print ip table rules [L]ist, [n]umeric output addr port
iptables-save  # save config file, IPv4/6 packet filtering, NAT admin tool
iwconfig  # print wireless devices
jobs  # print curr jobs
journalctl --disk-usage  # print journal filesystem usage
journalctl -u SERVICE  # print journal entries for SERVICE
kernel-install  # edit kernel, initramfs images from /boot
kill %1  # kill job 1
kill -9 PID  # kill proc by PID, ugly, ungraceful
kill %JOB  # kill by job number
kill -l  # [l]ist kill signal functions
klist  # print curr kerberos certificates
last  # print curr user login events
lastb  # print user accounts w/ auth attempts
lastlog  # print user last login session info
ldconfig  # configure dynamic linker run-time bindings, print cache
ldd DEV   # print shared object deps, e.g. /bin/bash
less -C FILE  # print contents, mouse nav, [C]lear previous contents
locate FILE  # find FILE, local db
localectl  # print keyboard and layout settings e.g. localectl status
localectl list-locales  # print locales
localectl list-keymaps  # print keyboard mappings
lshw  # pring hardware metrics
ls -li  # print dir inode numbers
ls -Z FILE  # print SELinux security context for FILE
lsmod | sort | less  # print currently loaded kernel modules
lsof -i  # list open files w/ process, [i]nternet
lsof -u USER  # list open files by USER
lspci -nn|v|vv|vvv  # list PCI devices, vendor codes, numbers, names, [v]erbose
lsusb -tv  # list USB devices, [t]ype, [v]erbose
md5sum FILE  # print MD5 message digest
sha256sum  # print SHA256 message digest
mke2fs -t  # create filesystem, e.g. ext3, ext4
modinfo DEVICE.ko.xz  # print kernel module info e.g. modinfo /lib/modules/.../drivers/bluetooth/btusb.ko.xz
more FILE  # print contents, forward only
mount -a  # mount [a]ll filesystems in fstab
mount -t  # specify filesystem [t]ype
nc |-lp SERVER PORT  # netcat [l]isten [p]ort PORT e.g. nc server02 22
netstat -tuplen | grep "LISTEN"  # print listening ports
nmap -sV SERVER -p PORT  # print SERVER port status e.g. nmap -sV server02 -p 21
nmcli connection show  # print network device metrics: name, UUID, type, device
nmcli device show  # print network device status: device, type, state, connection
nmcli con up|down DEVICE  # enable|disable net DEVICE e.g. ens32
nmcli con edit DEVICE  # open Net Manager dev editor > set ipv4.address 10.50.1.101/24
nmtui  # text UI for Net Manager
nslookup SERVER  # print name SERVER ip addr
od -vAn -N1 -td1 < /dev/urandom  # write 1 byte signed decimal integer
od -vAn -N2 -tu2 < /dev/urandom  # write 2 byte unsigned decimal integer
parted  # partition editor
pgrep SERVICE-NAME  # return service process id
pidof PROG  # print process id of running program, e.g. firefox
ping -c NUM  # execute ping NUM times
ping -I INT  # ping from specific outbound interface
pkill PID  # kill proc by id
printenv  # print user environment variables
ps -elf | grep -i "EXPR"  # print process for EXPR
readonly  # print shell read-only variables
renice  # alter priority of running processes
rmmod -f ARG  # [f]orce kernel mod ARG remove
rpm -ivh PKG|*  # Fedora local rpm [i]nstall, [v]erbose, [h]ash marks
rpm -qa PKG  # query PKG installer name e.g. rpm -qa python*
rpm -qi PKG  # query PKG installer info
rpm -ql PKG  # query PKG installer files
rpm -ql <<< rpm -qa ksh | sort > FILE  # print to file PKG installer files from common name
rpm -e PKG  # [e]rase or uninstall package
rsync -havz SRC DEST  # remote copy, sync files [h]uman readable, [a]rchive, [v]erbose, [z]compression
runlevel  # print previous and current System V Init runlevel
sar -u  # print performance info e.g. 'sar 2 6' - 2 sec interval, 6 queries total
screen | tmux  # terminal session multiplexer
setsebool -P  # SELinux write curr values to disc at reboot
shutdown -c  # cmd [sudo], interrupt stop reboot sequence
snap info PKG  # Linux cross distribution, dependency app installer
sort -k COLUMN
ss -p | grep EXPR  # print sockets w/ PIDs
su -l|c  # substitute user, [l]ogin, issue [c]ommand to shell
swapon  # print swap file metrics
systemctl daemon-reload  # reload the systemd manager configuration
systemctl isolate graphical.target | multi-user.target  # launch UI | cli
systemctl set-default TARGET  # set default target at boot
systemctl get-default  # return default target at boot
systemctl reboot -i
systemctl status --all |SERVICE  # print units runtime status
systemctl --type=service|target  # print system services | targets
systemctl list-units |grep -i "service | target | mount"  # print curr loaded modules
systemctl start | stop | | restart |enable | disable SERVICE  # manage SERVICE
systemd-analyze |blame | dump  # print startup process times, longest decending, dump manager logs
tail -f FILE  # print file appends
tail -n10 FILE  # print FILE last 10 lines
tail -n+500 FILE  # print FILE line 500->EOF
tar OPTIONS --exclude=PATTERN | --remove-files  # exclude file glob pattern, remove files after archiving
tar -zcvf ARCH.tar.gz CONTENTS  # [c]reate archive, g[z]ip compression, [v]erbose, [f]ile from CONTENTS
tar -tvf ARCH.tar.gz  # print archive file list, [t]list
tar -zxvf ARCH.tar.gz -C DIR  # e[x]tract archive to DIR
tcpdump -i DEVICE  # dump [i]nterface DEVICE traffic e.g. sudo tcpdump -i ens32
telinit CMD  # edit System V Init runlevel
top  # M - organize by memory, P - cpu usage, r - renice, reprioritizer PID
touch /home/$USER/file{1,2,3}  # create file1, file2, file3 in /home/$USER
traceroute -T DEST  # run trace w/ tcp packets, def port 80
tune2fs -l DEVICE  # view DEVICE filesystem info
udevadm control -R  # reload rules file
udevadm monitor -u  # print received udev events
ulimit -a  # print cpu stats, virtual mem, stack size
umask  # print default file perms, e.g. 666-umask=default
unzip ARCH.zip  # extract contents to curr dir
useradd -D  # print user default attribs
usermod -aG GROUP {USER}  # add curr user to GROUP or specify USER, [a]ppend, [G]roup
usermod -L|U USER  # [L]ock | [U]nlock USER account
usermod -m|d DIR USER  # [m]ove USER home [d]irectory to DIR
users  # print users logged in
virt-install  # install vm
visudo  # edit sudoers file - run cmds as root without root password
vmstat -d 5 3  # print virtual mem usage, [d]evices, 5 sec interval, 3 queries total
wget URL -o FILE  # non-interactive network downloader, e.g. HTTP{S}, FTP, [o]utput to FILE
whatis CMD  # print one-line manual page description
whereis -OPTIONS CMD  # locate binary, executable
whois FQDN  # query whois db for network node
who  # print users logged in
w  # print users logged in, session info
wc -l  # print word count, [l]ines e.g. ls DIR | wc -l = file count
xkill {PROC}  # kill windowed service by name | mouse
xrdp PARMS  # MS remote desktop tool, start xrdp daemon, edit firewall exceptions
xz -k CONTENTS  # compress CONTENTS [k]eep original .xz, .lzma
yum deplist PKG  # Fedora print deps list, e.g. yum deplist python36-rpm.x86_64
yum info PKG  # Fedora query PKG info
yum install -y epel-release cups-pdf
yum provides CFG-FILE  # print config file package association e.g. yum provides /etc/vsftpd/vsftpd.conf
yum remove -y PKG  # remove PKG
lpr FILE.txt  # CUPS, convert text FILE to pdf, def dest /home/$USER/Desktop
lpq  # list printer queue
zip -r ARCH.zip CONTENTS  # compress CONTENTS [r]ecursive

dirs  # print dir stack
popd  # pop stack
pushd DIR  # push to stack

# LVM - physical > volume > logical
pvscan  # print physical volume info
pvdisplay  # print physical volume detail
vgscan  # print volume group info
vgdispay  # pring volume group detail
lvscan  # print logical volume info
lvdisplay [VGLABEL]  # print logical volume detail e.g. sudo lvdisplay backup

pvcreate DEV1 DEV2 ..  # create physical volume across devices
vgcreate VGLABEL DEV1 DEV2 ..  # create volume group from physical volume assignments
lvcreate --name LVNAME --size LVSIZE VGLABEL  # e.g. sudo lvcreate --name sysbk --size 1GB backup

lvextend -L{SIZE} LVDEVICE  # extend logical volume to SIZE e.g. sudo lvextend -L5GB /dev/backup/databk
lvreduce -L{SIZE} LVDEVICE  # reduce logical volume to SZIE e.g. sudo lvreduce -L1GB /dev/backup/logbk
mkfs.ext4 LVDEVICE  # create logical volume filesystem
mount LVDEVICE MOUNTDIR  # mount logical volume e.g. sudo mount /dev/backup/sysbk /backup/sys
umount MOUNTDIR  # unmount previous mounted device
LVDEVCE MOUNTDIR FSTYPE defaults 0 0  # edit entries to /etc/fstab for auto mount on reboot
# /dev/backup/sysbk /backup/sys xfs defaults 0 0  # fstab example

# Ports
20 tcp|udp ftp  # file transfer protocol, data
21 tcp|udp ftp  # file transfer protocol, control
22 tcp ssh  # secure shell
23 tcp|udp telnet  # remote unencrypted text-based comms
25 tcp smtp  # simple mail transfer protocol
53 tcp|udp dns  # domain name server
69 udp tftp  # trivial file transfer protocol
123 udp ntp  # network time protocol
161 upd snmp  # simple network mngmt protocol
389 tcp|udp ldap  # light weight directory access protocol
631 tcp cups  # common Unix printing system
636 tcp ldaps  # light weight directory access protocol secure
1194 tcp|udp openvpn  # virtual private network server
3128 tcp squid  # proxy server
3306 tcp sql  # MS proprietary relational db manager
5900 tcp|udp vnc  # virtual network computing

# SED parsing
sed 's/ss//g'  	# remove ss string for all occurrences on the line [g]lobal
sed 's/ */_/g'  # sub underscore for any number of spaces occurring on line
sed '/^$/d'  	# delete empty lines
sed 's/:/\n/g' <<< $PATH | sort  # print PATH content vertically
sed '/.*XML-element-delete-line/d' <<< cat INFILE | sed 's/.*XML-element-delete-up-to-char-sequence//' | sed 's/XML-element-delete-after-char-sequence.*//' | sort > OUTFILE  # parse XML elements from input file, print results to output file

# YUM 
yum list installed | sort  # print yum local rpm packages installed
yum -v repolist  # print connected repos [v]erbose: base url, last updated, etc.
yum list "python*"  # print packages, default exclusive
yum search "python"  # search repo db, default inclusive
yumdownloader PKG --destdir DIR --resolve
yumdownloader python36 --destdir ~/Downloads/python36/ --resolve  # directory created if no exist

## Create local repo
find . -iname "*.rpm" -exec mv '{}' ./rpm-dir \;  # move rpms to local dir
cd /local/rpms/customrepo.repo  # browse to rpm local dir
createrepo .
sed 's/enabled = 0/enabled = 1' /etc/yum.repos.d/redhat.repo
yum repolist
yum makecache
yum install PKG | --nogpgcheck  # install package no gpg pub key check

# Filesystem - create mount
lsblk  # print connected devices w/ mounts
mkdir -p /mnt/dd1 /mnt/dd2  # create directories for device
parted /dev/sdX print  # print device info
parted /dev/sdX mklabel gpt  # set device label
parted -a optimal /dev/sdX mkpart primary 0% 100%  # create device partition
mkfs -t ext4 /dev/sdX  # create device file system type e.g. ext4
mkfs.ext4 /dev/sdX  # deprecated
blkid  # print connected devices w/ UUID, partUUID, label, partition type
e2label DEV LABEL
e2label /dev/sdX NEW_MOUNT

cp -air /etc/fstab /etc/fstab.bak  # backup fstab
vim /etc/fstab  # edit fstab, use UUID or label
# UUID="ALPHA-NUMERIC" | LABEL  MOUNT  FS-TYPE  OPTIONS  DUMP PASS
# UUID="b58ce781-4a45-496a-8cd3-ab28d3cef783"  /mnt/dd1  ext4  defaults  1  2
# LABEL=NEW_MOUNT  /mnt/dd1  ext4  nofail  1 2
mount -L LABEL MOUNT  # mount using label
mount -a  # test mounts, sudo

# crypto
shred FILE  # overwrite FILE contents, secure wipe
cryptsetup OPTIONS ACTION ACTION-ARG  # manage volume encryption
cryptsetup -v --verify-passphrase luksFormat VOLUME  # prompts for UPPER case 'YES'

## ssh key setup
ssh-keygen  # creates public, pvt key pair
# /default/.ssh/id_rsa  # pvt key
# /default/.ssh/id_rsa.pub  # public key
# /default/.ssh/authorized_keys  # connecting device pub key file
ssh-copy-id SERVER  # copy pub key to SERVER

# SVN
A - Added
C - Conflicted
D - Deleted
I - Ignored
M - Modified
R - Replaced
X - Unrevisioned directory created by externals definition
? - Not tracked by version control
! - Missing (removed by non-SVN command)

svn ls /project/directory/branches -v  # list branches
svn log -q -l5 URL  # print logs [q]uiet, [l]ine numbers
svn co -rREV URL  # svn check out revision
svn cp SOURCE TARGET  # svn copy branch

## Merge
pwd
/home/user/project-trunk  # curr trunk dir
svn up
svn merge --dry-run /project/directory/branches/branch_1
svn ci -m "merge branch_1 in to trunk"
svn -R resolved .  # svn resolve deps, [R]ecursive, **after issues corrected
svn cleanup
svn unlock --force /path/to/locked/file  # unlock file

# Ant | Maven
nohup ant &  # run ant background process, log to nohup.out
ant -p  # print ant commands, must be in build.xml dir
ant commonClean all
ant clean 2>&1 | tee -a antlog_$(date +%F_%R).log  # logger, stderr, stdout to log file
ant all
ant cmAll
ant html
ant mvnDeploy  # deploy ant maven artifacts to Nexus repo (see pom for url)
mvn compile
mvn compile clean
mvn -p  # print maven commands, must be in build.xml dir

# VIM
:e  # open file
:!  # run external cmd
:x!  # save, overwrite, preserve timestamp if no changes
:wq!  # save, overwrite, clobber timestamp no matter
:He  # open horizontal view - file browser
:Ve  # open vertical view - file browser
:set hls  # enable highlight search
:set nohls  # disable highlight search
:noh  # disable highlights
:set number
:set nonumber

:%s/Line/NewLine/  # copy replace 'Line' with 'NewLine'
:%s/Line/NewLine/g  # copy replace 'Line' with 'NewLine' all instances 

gg  # FILE top
SHIFT+g  # FILE bottom

y  # yank
p  # paste
x  # delete char
dd  # delete line
u  # undo
CTRL+r  # redo
CTRL+o  # jump back
CTRL+i  # jump forward
CTRL+g  # FILE name
CTRL+o  # back 1 page
CTRL+b  # back full screen
CTRL+f  # forward full screen
CTRL+d  # forward 1/2 screen
CTRL+u  # back 1/2 screen
CTRL+v [visual block], w - jump next column, x - delete, SHIFT+i ADD-TEXT + esc - apply changes

## tabs
vim -p FILE1, FILE2  # open in tabs
:tab help
:help tab-page-intro
:tabf FILE  # open existing file in tab
:tabnew FILE  # open new file in tab
:tabn | 'gt' | CTRL+PgDn  # tab next
:tabp | 'gT' | CTRL+PgUp  # tab prev
:tabfirst  # go to first tab
:tablast  # go to last tab
:tab 3  # go to tab 3
:tabm N  # move tab to N pos
:tabdo %s/foo/bar/g  # funct for all tabs
:qa  # quit all tabs
:wqa  # save quit all tabs

imap, t <Esc>:tabnew<CR>  # map 't' -> :tabnew

# Python
pydoc modules  # print python local installed modules
python3  # start python interpreter
>>> import vlc
>>> import sys
>>> print(vlc.__file__)  # print 'vlc' library file location
>>> print(sys.path)  	 # print python system path(s)
>>> sys.path.append("path/to/custom/bin")  # append to sys path
>>> help("modules")  	 # print local modules installed, get help info
>>> help("_struct")

# PIP - plugin manager
yum update -y && yum upgrade -y
yum install -y python3
pip3 install --upgrade pip
pip3 download -d . "pywinrm>=0.3.0"  # dl python3 pywinrm plugin installer

## Docker - test plugin dependences
docker inspect CONTAINER  # view container configurations, e.g. id, state metrics, network stats
docker network disconnect bridge CONTAINER  # disable network connection
pip3 install --no-index --find-links *  # install plugin w/ deps local, offline mode

# BASHRC
alias duc='du -ch | sort -n'  # print space consumers w/ total
alias ll='ls -halF --color=auto'
alias hh='history'
alias naut='nautilus $(pwd)'

## prompt colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
reset=$(tput sgr0)
bold=$(tput bold)

PS1='\[$bold\]\[$blue\]\u\[$white\]@\[$bold\]\[$cyan\]\h\[$reset\]> \[$red\]\W\[$reset\] \$ '

## PATH - remove duplicates
function removeDupPath() {
	local foo=$(sed 's/:/\n/g' <<< $PATH | sort | uniq -u)
	local fum=$(sed 's/:/\n/g' <<< $PATH | sort | uniq -d)
	local foo+=" $fum"
	PATH=$(echo $foo | sed 's/ /:/g')
}

## PATH - export
PATH="$HOME/bin:$HOME/.local/bin:$PATH"
export PATH

# Terminal
CTRL+SHIFT+t  # open terminal tab
CTRL+SHIFT+w  # close curr tab

# C++ compiler test
vim foo.c
#include<stdio.h>
int main(void){
	printf("Hello World!\n");
	return 0;
}
cc foo.c -o foo
./foo

# RAID config
RAID 0 = stripe, no parity, no disk failures (max performance)
RAID 1 = mirror (1-to-1 disk backup)
RAID 4 = stripe, parity on single disk
RAID 5 = stripe, parity across all disks, max one disk failure
RAID 6 = stripe, double parity across all disks, max two disk failures
RAID 10 = (1 + 0) mirroring + striping

## Create partition
gdisk /dev/sdX  # g|fdisk
> n # new partition
> Partition number = (default)
> First Sector = (default)
> Last Sector = (default)
> Hex code or GUID = fd00  # RAID partition type code
> t  # change partition type
> p  # print partition
> w  # write to disk

mdadm --create RAID-DEV --level=LEVEL --raid-devices=NUM DEV{1,2,..}  # create RAID partition at LEVEL for NUMber of DEVs
mdadm --create /dev/md1 --level=0 --raid-devices=2 /dev/sdb /dev/sdc  # create RAID /dev/md1, RAID 0, 2 devices at /dev/{sdb, sdc}

## Create filesystem, mount partition
mkfs -t ext4 /dev/md1
mkdir /raid_root
chown -R USER /raid_root
chgrp -R GROUP /raid_root
mount /dev/md1 /raid_root

## Edit fstab
vim /etc/fstab
/dev/md1  /raid_root  ext4  defaults  0  0

## Mount, test, start mdmonitor service
mount -a  # auto-mount fstab entries, sudo
cat /proc/mdstat  # show RAID personality overview
mdadm --detail /dev/md1  # show RAID part details: sz, dev, state
systemctl enable mdmonitor  # enable service at runtime
systemctl start mdmonitor  # auto start service at boot

# Sudoers file - visudo
student01 ALL=(ALL) NOPASSWD:ALL  # student01 acc exec all sudo cmds w/o switch 'su -' & no pd
