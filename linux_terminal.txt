# Linux - terminal commands

whois DNS-NAME  // query whois db for network node
who  // print who is logged in
w  // print who is logged in and what they are doing
whatis CMD  // single line command info
whereis -OPTIONS CMD  // locate binary, executable
locate FILE  // find file using local db

ps -elf | grep -i "java"
pkill PID  // kill proc by id
xkill PROC-NAME  // kill windowed service by name
kill -9 PID  // ugly kill proc by name | id
CMD /bin/kill  // test kill command
CMD > /dev/null  // send command to null
CMD > /dev/null 2>&1  // send to stdout, stderr to /dev/null

dd if=/dev/sdX of=/mnt/bkup/os_image_$(date +%F).img  // save os image
dd if=/dev/zero of=/dev/sdX  // write zeros to disk
dd if=/dev/urandom of=/dev/sdX  // write random data to disk

od -vAn -N4 -tu4 < /dev/urandom  // write 4 byte unsigned decimal integer
od -vAn -N2 -tu2 < /dev/urandom  // write 2 byte unsigned decimal integer
od -vAn -N1 -td1 < /dev/urandom  // write 1 byte signed decimal integer

pushd DIR  // push dir to stack
popd  // pop top dir from stack
dirs  // display stack

date
date --date "+60 days"
groups USER  // display user groups
users  // print users logged in
jobs  // print jobs
kill %JOB  // kill job
kill %1  // kill job '1'

find -OPTIONS PATH EXPR FILE
find . -iname "FILE"
find . -iname "FILE*"  // find files beginning w/ "FILE"
find . -iname ".svn" -exec rm -rvf "{}" \;  // remove .svn file recursively
find . -type f \( -iname \*.txt \)
find . -type f \( -iname \*.jpg -o -iname \*.png \)

sort -k COLUMN

ls -li  // display file inode numbers
find . -inum INODE -exec rm -i "{}" \;  // delete file by inode number

grep -OPTIONS EXPR LOCATION
grep -w "test"  // grep exclusive input, select line, only match whole word
grep -niR "test" ~/bin  // global regular expression; n=line number, i=ignore case, R=recursive
grep -niR --exclude-dir=.svn "DEPRECATED_"  // search keyword, exclude dir

head -OPTIONS FILE
head -n10 FILE  // print FILE first 10 lines
head -30 /dev/urandom > ~/urand_test.log  // write 30 lines random data
head -c 100G < /dev/urandom > FILE  // create 100 GB file w/ random data

tail -OPTIONS FILE
tail -n10 FILE  // print FILE last 10 lines
tail -n+500 FILE  // print FILE line '500' to EOF
tail -f FILE  // print active file appended data

cp -OPTIONS SRC DEST
cp -air /src/dir /dest/dir  // copy source to dest
cp -air /src/dir/* /dest/dir  // copy source contents to dest

tar -ztvf ARCH.tar.gz  // print file archive file list
tar -zcvf ARCH.tar.gz *  // [c]reate archive, g[z]ip compression, [v]erbose, all [f]iles in curr dir
tar -zcvf ARCH.tar.gz /path/to/contents  // e[x]tract archive to dir
tar -zxvf ARCH.tar.gz -C /remote/dir  // extract archive to remote dir

zip -r ARCH.zip *  // compress files to archive in curr dir
zip -r ARCH.zip /path/to/contents/* /random/pic.png
unzip ARCH.zip  // extract contents to curr dir

netstat -tuplen | grep "LISTEN"  // print listening ports

sed 's/ss//g'  # remove ss string for all occurrences on the line [g]lobal
sed 's/ */_/g'  # sub underscore for any number of spaces occurring on line
sed '/^$/d'  # delete empty lines
sed 's/:/\n/g' <<< $PATH | sort  # print PATH content vertically
sed '/.*XML-element-delete-line/d' <<< cat INFILE | sed 's/.*XML-element-delete-up-to-char-sequence//' | sed 's/XML-element-delete-after-char-sequence.*//' | sort > OUTFILE  # parse XML elements from input file, print results to output file

cat FILE | sort | uniq -d  // print duplicates, must be sorted

rpm -ql <<< rpm -qa | sort >> ~/installed_pkgs_$(date +%F_%R).log

# YUM commands - manage repos
yum list installed | sort  // print yum local rpm packages installed
yum repolist  // display curr connected repos
yum -v repolist  // display curr connected repos [v]erbose: base url, last updated, associated file name, etc.
yum list "python*"  // display curr packages, default exclusive - must use wildcard
yum search "python"  // search repo db, default inclusive - no wildcard
yumdownloader PKG --destdir DIR --resolve
yumdownloader python36 --destdir ~/Downloads/python36/ --resolve  // directory created if no exist

## RHEL7 - create local repo for rpm installs
find . -iname "*.rpm" -exec mv '{}' ./rpm-dir \;  # move rpms to local dir
cd /dir/with/rpms/redhat.repo  # browse to rpm local dir
createrepo .
sed 's/enabled = 0/enabled = 1' /etc/yum.repos.d/redhat.repo
yum repolist
yum makecache
yum install PKG --nogpgcheck  // install package no gpg pub key check


# Format, mount, create device partitions and file system
lsblk  # display connected devices with mounts
sudo mkdir -p /mnt/dd1 /mnt/dd2  # create directories for device

sudo parted /dev/sdX print  # print device info
sudo parted /dev/sdX mklabel gpt  # set device label
sudo parted -a optimal /dev/sdX mkpart primary 0% 100%  # create device partition
sudo mkfs -t ext4 /dev/sdX  # create device file system type e.g. ext4
sudo mkfs.ext4 /dev/sdX  # deprecated

sudo blkid  # display connected devices w/ UUIDs
cp -air /etc/fstab /etc/fstab.bak  # backup fstab
vim /etc/fstab  # edit fstab
UUID=<alpha-numeric-string-in-quotes>  <mount-location>  <file-system-type>  <options>  <dump> <pass>
UUID=”b58ce781-4a45-496a-8cd3-ab28d3cef783”  /mnt/dd1  ext4  defaults  1  2
sudo mount -a  # test mounts, error displayed if configurations incorrect

sudo usermod -aG GROUP USERNAME  # add group to user-name account
sudo chmod -R 775 /mnt  # edit directory permissions
sudo chown -R USERNAME /mnt  # change directory ownership
sudo chgrp -R GROUP /mnt  # change directory group affiliation


# SVN
A - Added
C - Conflicted
D - Deleted
I - Ignored
M - Modified
R - Replaced
X - Unrevisioned directory created by externals definition
? - Not tracked by version control
! - Missing (removed by non-SVN command)

svn ls /project/directory/branches -v  // list branches
svn log -q -l5 URL  // print logs [q]uiet, [l]ine numbers
svn co -rREV URL  // svn check out revision
svn cp SOURCE TARGET  // svn copy branch

## merge
pwd
/home/user/project-trunk  // curr trunk dir
svn up
svn merge --dry-run /project/directory/branches/branch_1
svn ci -m "merge branch_1 in to trunk"

svn -R resolved .  // svn resolve dependencies, [R]ecursive, **after issues corrected
svn cleanup
svn unlock --force /path/to/locked/file  // unlock file for saves


# Ant | Maven
nohup ant &  // run ant background process, log to nohup.out
ant -p  // print ant commands, must be in build.xml dir
ant commonClean all
ant clean 2>&1 | tee -a antlog_$(date +%F_%R).log  // ant logger, included stderr, print stdout to log file
ant all
ant cmAll
ant html
ant mvnDeploy  // deploy ant maven artifacts to Nexus repo (see pom for url)
mvn compile
mvn compile clean
mvn -p  // print maven commands, must be in build.xml dir


# VIM
:e  // open file
:!  // run external cmd
:x!  // save, overwrite, preserve timestamp if no changes
:wq!  // save, overwrite, clobber timestamp no matter
:He  // open horizontal view - file browser
:Ve  // open vertical view - file browser
:noh  // turn off highlights
:set number
:set nonumber

:%s/Line/NewLine/  // copy replace 'Line' with 'NewLine'
:s/Line/NewLine/g  // copy replace 'Line' with 'NewLine' all instances 

gg  // FILE top
SHIFT+g  // FILE bottom

y  // yank
p  // paste
x  // delete char
dd  // delete line
u  // undo
CTRL+r  // redo
CTRL+o  // jump back
CTRL+i  // jump forward
CTRL+g  // FILE name
CTRL+o  // back 1 page
CTRL+b  // back full screen
CTRL+f  // forward full screen
CTRL+d  // forward 1/2 screen
CTRL+u  // back 1/2 screen
CTRL+v [visual block], w - jump next column, x - delete, SHIFT+i <add text> + esc - apply changes

vim -p file1, file2  // open files in tabs
:tab help
:help tab-page-intro
:tabf  // search file in path, open in tab
:tabf file*
:tabn | 'gt' | <ctrl+PgDn>  // tab next
:tabp | 'gT' | <ctrl+PgUp>  // tab prev
:tabfirst  // go to first tab
:tablast  // go to last tab
:tab 3  // go to tab '3'
:tabm n  // move tab to 'n' pos
:tabdo %s/foo/bar/g  // funct for all tabs

imap, t <Esc>:tabnew<CR>  // vimrc; map 't' -> :tabnew


# Python
pydoc modules  // print python local installed modules
python3  // start python interpreter
>>> import vlc
>>> import sys
>>> print(vlc.__file__)  // print 'vlc' library file location
>>> print(sys.path)  // print python system path(s)
>>> sys.path.append("path/to/custom/bin")  // append to sys path
>>> help("modules")  // print local modules installed, get help info
>>> help("_struct")

## PIP - manage python plugins, dl online, install offline
sudo yum -y update && sudo yum -y upgrade
sudo yum -y install python3
sudo pip3 install --upgrade pip
sudo pip3 download -d . "pywinrm>=0.3.0"  // download python3 pywinrm plugin installers
...
docker inspect CONTAINER  // view container configurations (e.g. id, state parameters, metrics, network info, etc.)
docker network disconnect bridge CONTAINER  // if testing inside docker container, disable network connection
sudo pip3 install --no-index --find-links . pywinrm-0.4.2-py2.py3-none-any.whl  // install plugin w/ dependencies in offline mode, point to curr dir


# BASH
alias ll='ls -halF --color=auto'
alias duc='du -ch | sort -n'  # print space consumers w/ total

## prompt colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
reset=$(tput sgr0)
bold=$(tput bold)

PS1='\[$bold\]\[$blue\]\u\[$white\]@\[$bold\]\[$cyan\]\h\[$reset\]> \[$red\]\W\[$reset\] \$ '

## remove duplicates from PATH variable
function removeDupPath() {
	local foo=$(sed 's/:/\n/g' <<< $PATH | sort | uniq -u)
	local fum=$(sed 's/:/\n/g' <<< $PATH | sort | uniq -d)
	local foo+=" $fum"
	PATH=$(echo $foo | sed 's/ /:/g')
}

## edit, export PATH
PATH="$HOME/bin:$HOME/.local/bin:$PATH"
export PATH

CTRL+SHIFT+t  // open terminal tab
CTRL+SHIFT+w  // close curr tab

# C++ sample test compiler
vim foo.c
#include<stdio.h>
int main(void){
	printf("Hello World!\n");
	return 0;
}
cc foo.c -o foo
./foo

