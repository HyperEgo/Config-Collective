
# Linux commands
locate FILE  // find file using local db
whatis CMD  // single line command info
whereis -OPTIONS CMD  // locate binary, executable
whois SERVER-NAME  // query whois db for network node

ps -elf | grep -i "java"
pkill PID  // kill proc by id
xkill PROC-NAME  // kill windowed service by name
kill -9 PID  // ugly kill proc by name | id
CMD /bin/kill  // test kill command
CMD > /dev/null  // send command to null
CMD > /dev/null 2>&1  // send to stdout, stderr to /dev/null
head -30 /dev/urandom > ~/urand_test.log  // write 30 lines random data
od -vAn -N4 -tu4 < /dev/urandom  // write 4 byte unsigned decimal integer
od -vAn -N2 -tu2 < /dev/urandom  // write 2 byte unsigned decimal integer
od -vAn -N1 -td1 < /dev/urandom  // write 1 byte signed decimal integer

sort -k COLUMN

usermod -aG GROUP USER  // add group to user account

pushd .  // push curr dir to stack
popd  // pop top dir from stack
dirs  // display curr dirs on stack

date
date --date "+60 days"
groups USER  // display user groups
w
users
jobs  // print curr jobs
kill %JOB  // kill job
kill %1  // kill job '1'

find -OPTIONS PATH EXPR FILE
find . -iname "FILE"
find . -iname "FILE*"  // find files beginning w/ "FILE"
find . -iname ".svn" -exec rm -rvf "{}" \;  // remove .svn file recursively
ls -li  // display file inode numbers
find . -inum INODE -exec rm -i "{}" \;  // delete file by inode number
find . -type f \( -iname \*.txt \)
find . -type f \( -iname \*.jpg -o -iname \*.png \)

grep -OPTIONS EXPR LOCATION
grep -w "test"  // grep exclusive input, select line, only match whole word
grep -niR "test" ~/bin  // global regular expression; n=line number, i=ignore case, R=recursive
grep -niR --exclude-dir=.svn "DEPRECATED_"  // exclude .svn directories

head -OPTIONS FILE
head -n10 FILE  // print FILE first 10 lines
head -c 1G < /dev/urandom > FILE  // create 1GB file random data
tail -OPTIONS FILE
tail -n10 FILE  // print FILE last 10 lines
tail -n+500 FILE  // print FILE line '500' to EOF

cp -OPTIONS SRC DEST
cp -air /src/dir /dest/dir  // copy source dir to dest dir
cp -air /src/dir/* /dest/dir  // copy source dir contents to dest dir

tar -zcvf ARCHIVE.tar.gz DIR  // [c]reate archive, g[z]ip compression, [v]erbose, [f]ile
tar -zxvf ARCHIVE.tar.gz .  // e[x]tract archive to curr dir
tar -zxvf ARCHIVE.tar.gz -C /remote/dir  // extract to remote dir

zip -r ARCHIVE.zip DIR
zip -r ARCHIVE.zip /dir/contents/* /random/pic.png /random/spreadsheet.odt

netstat -tuplen | grep "LISTEN"

sed 's/ss//g'  // remove ss string for all occurrences on the line
sed 's/ */_/g'  // sub underscore for any number of spaces occurring on line\
sed '/^$/d'  // delete empty lines
sed 's/:/\n/g' <<< $PATH | sort  // print PATH content vertically

cat FILE | sort | uniq -d  // print duplicates, must be sorted

CTRL+SHIFT+t  // open terminal tab
CTRL+SHIFT+w  // close curr tab

# YUM - yellow dog updater modified
yum list installed
yum repolist  // display known repos
yum -v repolist  // display known repos [v]erbose: base url, last updated, associated file name, etc.
yum list "python*"  // display curr packages, default exclusive - must use wildcard
yum search "python"  // search repo db, default inclusive - no wildcard
yumdownloader PKG --destdir DIR --resolve
yumdownloader python36 --destdir ~/Downloads/python36/ --resolve

## create, setup local repos
find . -iname "*.rpm" -exec mv '{}' ./rpm-dir \;
createrepo ./rpm-dir
sed 's/enabled = 0/enabled = 1' /etc/yum.repos.d/redhat.repo
yum repolist
yum makecache
yum install git python36 vlc

rpm -ql <<< rpm -qa | sort >> ~/installed_pkgs_$(date +%F_%R).log

## format disc, create fs
sudo parted -a optimal /dev/sdb mkpart primary 0% 100%
sudo parted /dev/sdb mklabel gpt
sudo parted /dev/sdb print
sudo mkfs -t ext4 /dev/sdb
sudo mkfs.ext4 /dev/sdb

lsblk  // display connect drives
sudo blkid  // display UUID, fs type for connected drives


# Git
git init
git add -A .
git commit -m "first commit message"
git commit -a  // open editor for multi-line comments
git push

## remote repo setup - local
remote_$> git init --bare  // bare repo, no working dir
local_$> git remote add origin remote-URL  // add remote named 'origin' for remote URL
local_$> git remote -v  // list 'pull', 'fetch' connected remotes
local_$> git push origin master  // push changes to remote named 'origin' on 'master' branch

git config --get remote.origin.url  // display upstream url for remote named 'origin'
git push --set-upstream origin master  // set upstream remote named 'origin' for 'master' branch

## remote repo setup - shared
mkdir -p /share/devrepo.git
sudo chgrp /share/devrepo.git
sudo chmod g+s|g+ws /share/devrepo.git  // subsequent files added set to dir perms
cd /share/devrepo.git
git init --bare --shared=group  // explicitly set repo to shared status - multiple user contributes


# Ant | Maven
nohup ant &  // run ant background process, log to nohup.out
ant -p  // print ant commands, must be in build.xml dir
ant commonClean all
ant clean 2>&1 | tee -a antlog_$(date +%F_%R).log  // ant logger, included stderr, print stdout to log file
ant all
ant cmAll
ant html
ant mvnDeploy  // deploy ant maven artifacts to Nexus repo (see pom for url)
mvn compile
mvn compile clean
mvn -p  // print maven commands, must be in build.xml dir


# VIM
:e  // open file
:!  // run external cmd
:x!  // save, overwrite, preserve timestamp if no changes
:wq!  // save, overwrite, clobber timestamp no matter
:He  // open horizontal view - file browser
:Ve  // open vertical view - file browser
:noh  // turn off highlights
:set number
:set nonumber

:%s/Line/NewLine/  // copy replace 'Line' with 'NewLine'
:s/Line/NewLine/g  // copy replace 'Line' with 'NewLine' all instances 

gg  // FILE top
SHIFT+g  // FILE bottom

y  // yank
p  // paste
x  // delete char
dd  // delete line
u  // undo
CTRL-r  // redo
CTRL-o  // jump back
CTRL-i  // jump forward
CTRL-g  // FILE name
CTRL-o  // back 1 page
CTRL-b  // back full screen
CTRL-f  // forward full screen
CTRL-d  // forward 1/2 screen
CTRL-u  // back 1/2 screen

CTRL-v [visual block], w - jump next column, x - delete  // copy, delete column

vim -p file1, file2  // open files in tabs
:tab help
:help tab-page-intro
:tabf  // search file in path, open in tab
:tabf file*
:tabn | 'gt' | <ctrl+PgDn>  // tab next
:tabp | 'gT' | <ctrl+PgUp>  // tab prev
:tabfirst  // go to first tab
:tablast  // go to last tab
:tab 3  // go to tab '3'
:tabm n  // move tab to 'n' pos
:tabdo %s/foo/bar/g  // funct for all tabs

imap, t <Esc>:tabnew<CR>  // map 't', include in .vimrc file


# Python
pydoc modules
python3
>>> import vlc
>>> import sys
>>> print(vlc.__file__)  // print file location
>>> sys.path.apend("string")
>>> print(sys.path)


# BASH
alias ll='ls -halF --color=auto'
alias duc='du -ch | sort -n'  // print list space consumers w/ total

## prompt colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
reset=$(tput sgr0)
bold=$(tput bold)

PS1='\[$bold\]\[$blue\]\u\[$white\]@\[$bold\]\[$cyan\]\h\[$reset\]> \[$red\]\W\[$reset\] \$ '

## remove duplicates from PATH variable
function removeDupPath() {
	local foo=$(sed 's/:/\n/g' <<< $PATH | sort | uniq -u)
	local fum=$(sed 's/:/\n/g' <<< $PATH | sort | uniq -d)
	local foo+=" $fum"
	PATH=$(echo $foo | sed 's/ /:/g')
}

## edit, export PATH
PATH="$HOME/bin:$HOME/.local/bin:$PATH"
export PATH

# C++ sample test compiler
vim foo.c
#include<stdio.h>
int main(void){
	printf("Hello World!\n");
	return 0;
}
cc foo.c -o foo
./foo

